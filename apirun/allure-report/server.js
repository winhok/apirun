
        function _base64ToArrayBuffer(base64) {
            var binary_string = window.atob(base64);
            var len = binary_string.length;
            var bytes = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                bytes[i] = binary_string.charCodeAt(i);
            }
            return bytes.buffer;
        }

        function _arrayBufferToBase64( buffer ) {
          var binary = '';
          var bytes = new Uint8Array( buffer );
          var len = bytes.byteLength;
          for (var i = 0; i < len; i++) {
             binary += String.fromCharCode( bytes[ i ] );
          }
          return window.btoa( binary );
        }

        document.addEventListener("DOMContentLoaded", function() {
            var old_prefilter = jQuery.htmlPrefilter;

            jQuery.htmlPrefilter = function(v) {
            
                var regs = [
                    /<a[^>]*href="(?<url>[^"]*)"[^>]*>/gi,
                    /<img[^>]*src="(?<url>[^"]*)"\/?>/gi,
                    /<source[^>]*src="(?<url>[^"]*)"/gi
                ];
                
                var replaces = {};

                for (i in regs)
                {
                    reg = regs[i];

                    var m = true;
                    var n = 0;
                    while (m && n < 100)
                    {
                        n += 1;
                        
                        m = reg.exec(v);
                        if (m)
                        {
                            if (m['groups'] && m['groups']['url'])
                            {
                                var url = m['groups']['url'];
                                if (server_data.hasOwnProperty(url))
                                {
                                    console.log(`Added url:${url} to be replaced with data of ${server_data[url].length} bytes length`);
                                    replaces[url] = server_data[url];                                    
                                }
                            }
                        }
                    }
                }
                
                for (let src in replaces)
                {
                    let dest = replaces[src];
                    v = v.replace(src, dest);
                }

                return old_prefilter(v);
            };
        });

        var server_data={
 "data/behaviors.csv": "\"BROKEN\",\"EPIC\",\"FAILED\",\"FEATURE\",\"PASSED\",\"SKIPPED\",\"STORY\",\"UNKNOWN\"\n\"0\",\"\",\"0\",\"购物车模块\",\"4\",\"0\",\"订单模块\",\"0\"\n\"0\",\"\",\"0\",\"提交订单模块\",\"2\",\"0\",\"订单模块\",\"0\"\n\"2\",\"\",\"0\",\"登录模块\",\"0\",\"0\",\"加密项目\",\"0\"\n\"0\",\"\",\"0\",\"登录模块\",\"3\",\"0\",\"用户模块\",\"0\"\n\"0\",\"\",\"0\",\"地址模块\",\"4\",\"0\",\"地址模块\",\"0\"\n\"0\",\"\",\"0\",\"注册模块\",\"1\",\"0\",\"用户模块\",\"0\"\n", 
 "data/behaviors.json": "{\"uid\":\"b1a8273437954620fa374b796ffaacdd\",\"name\":\"behaviors\",\"children\":[{\"name\":\"注册模块\",\"children\":[{\"name\":\"用户模块\",\"children\":[{\"name\":\"用户注册用例-生成用户名能生成成功\",\"uid\":\"56d77263f9f0bc36\",\"parentUid\":\"3f46b3e562b01229d303a60394efb75b\",\"status\":\"passed\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"3f46b3e562b01229d303a60394efb75b\"}],\"uid\":\"76e5fd360fd49f5d26aa0e7d1dc18c5c\"},{\"name\":\"登录模块\",\"children\":[{\"name\":\"用户模块\",\"children\":[{\"name\":\"T2-登录用例-正确的用户名和密码\",\"uid\":\"6d91d2c3d36393e\",\"parentUid\":\"a3f8a81ba36fd83773ae66bc27d76453\",\"status\":\"passed\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-错误的用户名和密码\",\"uid\":\"8efb5df6e5394699\",\"parentUid\":\"a3f8a81ba36fd83773ae66bc27d76453\",\"status\":\"passed\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-正确的用户名和密码\",\"uid\":\"7e0521dbe55b45fe\",\"parentUid\":\"a3f8a81ba36fd83773ae66bc27d76453\",\"status\":\"passed\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"a3f8a81ba36fd83773ae66bc27d76453\"},{\"name\":\"加密项目\",\"children\":[{\"name\":\"加密接口-正确的用户名和密码\",\"uid\":\"79652414956fd36\",\"parentUid\":\"9c54106b578b27880667f513f3eae964\",\"status\":\"broken\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加密接口-错误的用户名和密码\",\"uid\":\"56991eb67b28e2e1\",\"parentUid\":\"9c54106b578b27880667f513f3eae964\",\"status\":\"broken\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"9c54106b578b27880667f513f3eae964\"}],\"uid\":\"6958045a481574bf02bb11ef07a7047b\"},{\"name\":\"购物车模块\",\"children\":[{\"name\":\"订单模块\",\"children\":[{\"name\":\"加入购物车成功-表单格式\",\"uid\":\"3a3ea388a40212e2\",\"parentUid\":\"52130c2d4c883f4b8df09d917538ee10\",\"status\":\"passed\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加入购物车成功-JSON格式\",\"uid\":\"507442bfe1017b59\",\"parentUid\":\"52130c2d4c883f4b8df09d917538ee10\",\"status\":\"passed\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询购物车列表数据\",\"uid\":\"f231b963eaf35a29\",\"parentUid\":\"52130c2d4c883f4b8df09d917538ee10\",\"status\":\"passed\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"删除购物车成功\",\"uid\":\"5e75ff36be7819ef\",\"parentUid\":\"52130c2d4c883f4b8df09d917538ee10\",\"status\":\"passed\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"52130c2d4c883f4b8df09d917538ee10\"}],\"uid\":\"a83f24d9e1c208095768a6add7b4e5f8\"},{\"name\":\"地址模块\",\"children\":[{\"name\":\"地址模块\",\"children\":[{\"name\":\"查询地址列表\",\"uid\":\"5ba6659e6546b46\",\"parentUid\":\"b2553fe927c3432bcdd1b740661b8ffc\",\"status\":\"passed\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"删除地址列表\",\"uid\":\"2185ce8ae78ddd71\",\"parentUid\":\"b2553fe927c3432bcdd1b740661b8ffc\",\"status\":\"passed\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"添加地址接口\",\"uid\":\"ae8f4ed1618bec7b\",\"parentUid\":\"b2553fe927c3432bcdd1b740661b8ffc\",\"status\":\"passed\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询地址列表-提交订单用\",\"uid\":\"7b9468eb5499881b\",\"parentUid\":\"b2553fe927c3432bcdd1b740661b8ffc\",\"status\":\"passed\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"b2553fe927c3432bcdd1b740661b8ffc\"}],\"uid\":\"2ac868be9eb6cef30715c6c4b8d38646\"},{\"name\":\"提交订单模块\",\"children\":[{\"name\":\"订单模块\",\"children\":[{\"name\":\"提交订单-购物车\",\"uid\":\"7a1f090ca757623\",\"parentUid\":\"31df004708eff5341519fdb8dee43c47\",\"status\":\"passed\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"提交订单-商品详情\",\"uid\":\"44f6c54e2a9b8299\",\"parentUid\":\"31df004708eff5341519fdb8dee43c47\",\"status\":\"passed\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"31df004708eff5341519fdb8dee43c47\"}],\"uid\":\"fa1612b17e9a6e5a15f628632061b4f1\"}]}", 
 "data/categories.csv": "\"BROKEN\",\"CATEGORY\",\"FAILED\",\"PASSED\",\"SKIPPED\",\"UNKNOWN\"\n\"2\",\"Test defects\",\"0\",\"0\",\"0\",\"0\"\n", 
 "data/categories.json": "{\"uid\":\"4b4757e66a1912dae1a509f688f20b0f\",\"name\":\"categories\",\"children\":[{\"name\":\"Test defects\",\"children\":[{\"name\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\",\"children\":[{\"name\":\"加密接口-正确的用户名和密码\",\"uid\":\"79652414956fd36\",\"parentUid\":\"1040b52cf7db20e1b59826456f66846c\",\"status\":\"broken\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"1040b52cf7db20e1b59826456f66846c\"},{\"name\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\",\"children\":[{\"name\":\"加密接口-错误的用户名和密码\",\"uid\":\"56991eb67b28e2e1\",\"parentUid\":\"d881fbe675245af965c19bb6c81017ee\",\"status\":\"broken\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"d881fbe675245af965c19bb6c81017ee\"}],\"uid\":\"bdbf199525818fae7a8651db9eafe741\"}]}", 
 "data/packages.json": "{\"uid\":\"83edc06c07f9ae9e47eb6dd1b683e4e2\",\"name\":\"packages\",\"children\":[{\"name\":\"core.ApiTestRunner\",\"children\":[{\"name\":\"用户注册用例-生成用户名能生成成功\",\"uid\":\"56d77263f9f0bc36\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-正确的用户名和密码\",\"uid\":\"6d91d2c3d36393e\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-错误的用户名和密码\",\"uid\":\"8efb5df6e5394699\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-正确的用户名和密码\",\"uid\":\"7e0521dbe55b45fe\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加入购物车成功-表单格式\",\"uid\":\"3a3ea388a40212e2\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加入购物车成功-JSON格式\",\"uid\":\"507442bfe1017b59\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询购物车列表数据\",\"uid\":\"f231b963eaf35a29\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"删除购物车成功\",\"uid\":\"5e75ff36be7819ef\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询地址列表\",\"uid\":\"5ba6659e6546b46\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"删除地址列表\",\"uid\":\"2185ce8ae78ddd71\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"添加地址接口\",\"uid\":\"ae8f4ed1618bec7b\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询地址列表-提交订单用\",\"uid\":\"7b9468eb5499881b\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"提交订单-购物车\",\"uid\":\"7a1f090ca757623\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"提交订单-商品详情\",\"uid\":\"44f6c54e2a9b8299\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"passed\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加密接口-正确的用户名和密码\",\"uid\":\"79652414956fd36\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"broken\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加密接口-错误的用户名和密码\",\"uid\":\"56991eb67b28e2e1\",\"parentUid\":\"0f54ea8124d064b0f263a52b3b1c0f74\",\"status\":\"broken\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"core.ApiTestRunner\"}]}", 
 "data/suites.csv": "\"DESCRIPTION\",\"DURATION IN MS\",\"NAME\",\"PARENT SUITE\",\"START TIME\",\"STATUS\",\"STOP TIME\",\"SUB SUITE\",\"SUITE\",\"TEST CLASS\",\"TEST METHOD\"\n\"查看购物车模块备注\",\"163\",\"查询购物车列表数据\",\"core\",\"Wed Oct 09 03:08:16 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:17 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"加入购物车模块备注\",\"148\",\"加入购物车成功-表单格式\",\"core\",\"Wed Oct 09 03:08:16 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:16 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"提交订单模块备注\",\"205\",\"提交订单-购物车\",\"core\",\"Wed Oct 09 03:08:20 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:20 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"登录模块备注\",\"2036\",\"加密接口-错误的用户名和密码\",\"core\",\"Wed Oct 09 03:08:23 HKT 2024\",\"broken\",\"Wed Oct 09 03:08:25 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"登录模块备注\",\"182\",\"T2-登录用例-正确的用户名和密码\",\"core\",\"Wed Oct 09 03:08:16 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:16 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"地址列表模块备注\",\"1474\",\"查询地址列表\",\"core\",\"Wed Oct 09 03:08:17 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:18 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"登录模块备注\",\"2146\",\"加密接口-正确的用户名和密码\",\"core\",\"Wed Oct 09 03:08:21 HKT 2024\",\"broken\",\"Wed Oct 09 03:08:23 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"地址列表模块备注\",\"1727\",\"查询地址列表-提交订单用\",\"core\",\"Wed Oct 09 03:08:18 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:20 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"登录模块备注\",\"176\",\"T2-登录用例-正确的用户名和密码\",\"core\",\"Wed Oct 09 03:08:15 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:16 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"查看购物车模块备注\",\"133\",\"删除购物车成功\",\"core\",\"Wed Oct 09 03:08:17 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:17 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"加入购物车模块备注\",\"158\",\"加入购物车成功-JSON格式\",\"core\",\"Wed Oct 09 03:08:16 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:16 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"登录模块备注\",\"172\",\"T2-登录用例-错误的用户名和密码\",\"core\",\"Wed Oct 09 03:08:16 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:16 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"添加地址模块备注\",\"142\",\"添加地址接口\",\"core\",\"Wed Oct 09 03:08:18 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:18 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"注册模块备注\",\"213\",\"用户注册用例-生成用户名能生成成功\",\"core\",\"Wed Oct 09 03:08:15 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:15 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"提交订单模块备注\",\"168\",\"提交订单-商品详情\",\"core\",\"Wed Oct 09 03:08:20 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:21 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n\"地址删除模块备注\",\"135\",\"删除地址列表\",\"core\",\"Wed Oct 09 03:08:18 HKT 2024\",\"passed\",\"Wed Oct 09 03:08:18 HKT 2024\",\"TestRunner\",\"ApiTestRunner\",\"\",\"\"\n", 
 "data/suites.json": "{\"uid\":\"98d3104e051c652961429bf95fa0b5d6\",\"name\":\"suites\",\"children\":[{\"name\":\"core\",\"children\":[{\"name\":\"ApiTestRunner\",\"children\":[{\"name\":\"TestRunner\",\"children\":[{\"name\":\"用户注册用例-生成用户名能生成成功\",\"uid\":\"56d77263f9f0bc36\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-正确的用户名和密码\",\"uid\":\"6d91d2c3d36393e\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-错误的用户名和密码\",\"uid\":\"8efb5df6e5394699\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-正确的用户名和密码\",\"uid\":\"7e0521dbe55b45fe\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加入购物车成功-表单格式\",\"uid\":\"3a3ea388a40212e2\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加入购物车成功-JSON格式\",\"uid\":\"507442bfe1017b59\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询购物车列表数据\",\"uid\":\"f231b963eaf35a29\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"删除购物车成功\",\"uid\":\"5e75ff36be7819ef\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询地址列表\",\"uid\":\"5ba6659e6546b46\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"删除地址列表\",\"uid\":\"2185ce8ae78ddd71\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"添加地址接口\",\"uid\":\"ae8f4ed1618bec7b\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询地址列表-提交订单用\",\"uid\":\"7b9468eb5499881b\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"提交订单-购物车\",\"uid\":\"7a1f090ca757623\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"提交订单-商品详情\",\"uid\":\"44f6c54e2a9b8299\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"passed\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加密接口-正确的用户名和密码\",\"uid\":\"79652414956fd36\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"broken\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加密接口-错误的用户名和密码\",\"uid\":\"56991eb67b28e2e1\",\"parentUid\":\"2330b529a6efba5699b4cc773c4a9422\",\"status\":\"broken\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"2330b529a6efba5699b4cc773c4a9422\"}],\"uid\":\"9727a294ea2637317a30abc602498b38\"}],\"uid\":\"72796fdbb1ef5e42d7f9951dd4e7356a\"}]}", 
 "data/timeline.json": "{\"uid\":\"ab17fc5a4eb3bca4b216b548c7f9fcbc\",\"name\":\"timeline\",\"children\":[{\"name\":\"winhok\",\"children\":[{\"name\":\"9712-MainThread\",\"children\":[{\"name\":\"加入购物车成功-JSON格式\",\"uid\":\"507442bfe1017b59\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"添加地址接口\",\"uid\":\"ae8f4ed1618bec7b\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-正确的用户名和密码\",\"uid\":\"6d91d2c3d36393e\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"提交订单-商品详情\",\"uid\":\"44f6c54e2a9b8299\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-错误的用户名和密码\",\"uid\":\"8efb5df6e5394699\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加入购物车成功-表单格式\",\"uid\":\"3a3ea388a40212e2\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"删除购物车成功\",\"uid\":\"5e75ff36be7819ef\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"提交订单-购物车\",\"uid\":\"7a1f090ca757623\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"删除地址列表\",\"uid\":\"2185ce8ae78ddd71\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加密接口-正确的用户名和密码\",\"uid\":\"79652414956fd36\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"broken\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"加密接口-错误的用户名和密码\",\"uid\":\"56991eb67b28e2e1\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"broken\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"用户注册用例-生成用户名能生成成功\",\"uid\":\"56d77263f9f0bc36\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询购物车列表数据\",\"uid\":\"f231b963eaf35a29\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询地址列表\",\"uid\":\"5ba6659e6546b46\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"查询地址列表-提交订单用\",\"uid\":\"7b9468eb5499881b\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]},{\"name\":\"T2-登录用例-正确的用户名和密码\",\"uid\":\"7e0521dbe55b45fe\",\"parentUid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\",\"status\":\"passed\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182},\"flaky\":false,\"newFailed\":false,\"newPassed\":false,\"newBroken\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"parameters\":[\"''\"],\"tags\":[]}],\"uid\":\"a34bc7c17e6fbe3bcb0da040e1c4dc8f\"}],\"uid\":\"20a5052f8440c19177f7775e66365542\"}]}", 
 "data/attachments/11368f446ed88a52.txt": "当前的测试数据： {'desc': '添加地址接口', 'featureName': '地址模块', 'storyName': '地址模块', 'remark': '添加地址模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/useraddress/save', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'name': '李文静', 'tel': 15096964646, 'province': 18, 'city': 27, 'county': 2916, 'address': '2栋403室'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '新增成功', 'OP_STR': '=='}}], '_case_name': '添加地址接口'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/useraddress/save', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'name': '李文静', 'tel': 15096964646, 'province': 18, 'city': 27, 'county': 2916, 'address': '2栋403室'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '新增成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14586'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '新增成功', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/attachments/11a464ce9c4a18e0.txt": "2024-10-09 03:08:18 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:19 DEBUG http://shop-xo.hctestedu.com:80 \"GET /?s=api%2Fuseraddress%2Findex&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/1f566bb19c97218.txt": "2024-10-09 03:08:20 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:21 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=%2Fapi%2Fbuy%2Fadd&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/284a29bd61803f63.txt": "当前的测试数据： {'desc': '加密接口', 'storyName': '加密项目', 'featureName': '登录模块', 'remark': '登录模块备注', 'steps': [{'进行数据加密 - 用户名': {'关键字': 'encrypt_aes', 'data': '{{username}}', 'VARNAME': 'aes_username'}}, {'进行数据加密 - 密码': {'关键字': 'encrypt_aes', 'data': '{{password}}', 'VARNAME': 'aes_password'}}, {'发送Post请求': {'关键字': 'request_post_form_urlencoded', 'URL': 'http://127.0.0.1:8080/login_safe', 'DATA': {'password': '{{aes_username}}', 'username': '{{aes_password}}'}}}], 'context': {'username': 'hami', 'password': '1234567', 'desc': '错误的用户名和密码'}, '_case_name': '加密接口-错误的用户名和密码'}\n开始执行步骤：进行数据加密 - 用户名 - {'关键字': 'encrypt_aes', 'data': '{{username}}', 'VARNAME': 'aes_username'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '提交成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14587', 'aes_username': 'Sd7dHpyVfDorD9Pws7ogPg==', 'aes_password': 'mdSm0RmB+xAKrTah3DG31A=='}\n-----------------------\n开始执行步骤：进行数据加密 - 密码 - {'关键字': 'encrypt_aes', 'data': '{{password}}', 'VARNAME': 'aes_password'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '提交成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14587', 'aes_username': 'Sd7dHpyVfDorD9Pws7ogPg==', 'aes_password': 'JK1ZBV2UdsDlY69wOMgd2w=='}\n-----------------------\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_form_urlencoded', 'URL': 'http://127.0.0.1:8080/login_safe', 'DATA': {'password': '{{aes_username}}', 'username': '{{aes_password}}'}}\n--当前步骤执行结束--\n", 
 "data/attachments/313cb6aff85d7d3b.txt": "2024-10-09 03:08:16 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:16 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=api%2Fcart%2Fsave&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/3344ff42ea1d7d49.txt": "2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.address`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.address` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.automotive`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.automotive` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.bank`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Specified locale `en_US` is not available for provider `faker.providers.bank`. Locale reset to `en_GB` for this provider. factory.py _find_provider_class 86\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.barcode`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.barcode` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.color`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.color` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.company`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.company` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.credit_card`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.credit_card` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.currency`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.currency` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.date_time`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.date_time` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.emoji` does not feature localization. Specified locale `en_US` is not utilized for this provider. factory.py _find_provider_class 106\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.file` does not feature localization. Specified locale `en_US` is not utilized for this provider. factory.py _find_provider_class 106\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.geo`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.geo` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.internet`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.internet` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.isbn` does not feature localization. Specified locale `en_US` is not utilized for this provider. factory.py _find_provider_class 106\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.job`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.job` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.lorem`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.lorem` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.misc`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.misc` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.passport`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.passport` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.person`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.person` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.phone_number`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.phone_number` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.profile` does not feature localization. Specified locale `en_US` is not utilized for this provider. factory.py _find_provider_class 106\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.python` does not feature localization. Specified locale `en_US` is not utilized for this provider. factory.py _find_provider_class 106\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.sbn` does not feature localization. Specified locale `en_US` is not utilized for this provider. factory.py _find_provider_class 106\n2024-10-09 03:08:15 DEBUG Looking for locale `en_US` in provider `faker.providers.ssn`. factory.py _find_provider_class 76\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.ssn` has been localized to `en_US`. factory.py _find_provider_class 95\n2024-10-09 03:08:15 DEBUG Provider `faker.providers.user_agent` does not feature localization. Specified locale `en_US` is not utilized for this provider. factory.py _find_provider_class 106\n2024-10-09 03:08:15 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:15 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=api%2Fuser%2Freg HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/3615fd726f5ddaef.txt": "2024-10-09 03:08:18 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:18 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=api%2Fuseraddress%2Fsave&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/3aeaee54aacc032c.txt": "当前的测试数据： {'desc': '提交订单-购物车', 'featureName': '提交订单模块', 'storyName': '订单模块', 'remark': '提交订单模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/buy/add', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'buy_type': 'cart', 'address_id': '{{add_id}}', 'ids': '{{card_id_2}}', 'payment_id': 4, 'user_note': '通过购物车进行下单'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '提交成功', 'OP_STR': '=='}}], '_case_name': '提交订单-购物车'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/buy/add', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'buy_type': 'cart', 'address_id': '{{add_id}}', 'ids': '{{card_id_2}}', 'payment_id': 4, 'user_note': '通过购物车进行下单'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '提交成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14587'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '提交成功', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/attachments/41355006111046a2.txt": "当前的测试数据： {'desc': '用户注册用例', 'featureName': '注册模块', 'storyName': '用户模块', 'remark': '注册模块备注', 'steps': [{'生成注册的用户名': {'关键字': 'generate_name', 'VARNAME': 'username'}}, {'发送Post请求': {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/user/reg'}, 'DATA': {'accounts': '{{username}}', 'pwd': '{{password}}', 'type': 'username'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '{{expected}}', 'OP_STR': '=='}}], 'context': {'password': '123456', 'expected': '注册成功', 'desc': '生成用户名能生成成功'}, '_case_name': '用户注册用例-生成用户名能生成成功'}\n开始执行步骤：生成注册的用户名 - {'关键字': 'generate_name', 'VARNAME': 'username'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/user/reg'}, 'DATA': {'accounts': '{{username}}', 'pwd': '{{password}}', 'type': 'username'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '注册成功'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '{{expected}}', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/attachments/444d4863699e53fc.txt": "当前的测试数据： {'desc': '加密接口', 'storyName': '加密项目', 'featureName': '登录模块', 'remark': '登录模块备注', 'steps': [{'进行数据加密 - 用户名': {'关键字': 'encrypt_aes', 'data': '{{username}}', 'VARNAME': 'aes_username'}}, {'进行数据加密 - 密码': {'关键字': 'encrypt_aes', 'data': '{{password}}', 'VARNAME': 'aes_password'}}, {'发送Post请求': {'关键字': 'request_post_form_urlencoded', 'URL': 'http://127.0.0.1:8080/login_safe', 'DATA': {'password': '{{aes_username}}', 'username': '{{aes_password}}'}}}], 'context': {'username': 'tony', 'password': '123456', 'desc': '正确的用户名和密码'}, '_case_name': '加密接口-正确的用户名和密码'}\n开始执行步骤：进行数据加密 - 用户名 - {'关键字': 'encrypt_aes', 'data': '{{username}}', 'VARNAME': 'aes_username'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '提交成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14587', 'aes_username': 'XbXHJrNLwoTVcyfqM9eTgQ=='}\n-----------------------\n开始执行步骤：进行数据加密 - 密码 - {'关键字': 'encrypt_aes', 'data': '{{password}}', 'VARNAME': 'aes_password'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '提交成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14587', 'aes_username': 'XbXHJrNLwoTVcyfqM9eTgQ==', 'aes_password': 'mdSm0RmB+xAKrTah3DG31A=='}\n-----------------------\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_form_urlencoded', 'URL': 'http://127.0.0.1:8080/login_safe', 'DATA': {'password': '{{aes_username}}', 'username': '{{aes_password}}'}}\n--当前步骤执行结束--\n", 
 "data/attachments/4abbb61901269f4f.txt": "2024-10-09 03:08:20 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:20 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=%2Fapi%2Fbuy%2Fadd&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/4d3ab828e4e5c305.txt": "2024-10-09 03:08:17 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:17 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=api%2Fcart%2Fdelete&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/52eb79fa7ffaf37c.txt": "2024-10-09 03:08:21 DEBUG Starting new HTTP connection (1): 127.0.0.1:8080 connectionpool.py _new_conn 243", 
 "data/attachments/62bdef39f3c93405.txt": "当前的测试数据： {'desc': '查询地址列表-提交订单用', 'featureName': '地址模块', 'storyName': '地址模块', 'remark': '地址列表模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_get', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/useraddress/index', 'application': 'app', 'token': '{{msg_token}}'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': 'success', 'OP_STR': '=='}}, {'通过JSONPATH提取数据-add_id': {'关键字': 'ex_jsonData', 'EXVALUE': '$..id', 'INDEX': 0, 'VARNAME': 'add_id'}}], '_case_name': '查询地址列表-提交订单用'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_get', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/useraddress/index', 'application': 'app', 'token': '{{msg_token}}'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': 'success', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14586'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': 'success', 'OP_STR': '=='}\n开始执行步骤：通过JSONPATH提取数据-add_id - {'关键字': 'ex_jsonData', 'EXVALUE': '$..id', 'INDEX': 0, 'VARNAME': 'add_id'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': 'success', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14587'}\n-----------------------\n--当前步骤执行结束--\n", 
 "data/attachments/65b4e3182729e996.txt": "当前的测试数据： {'desc': '加入购物车成功-JSON格式', 'featureName': '购物车模块', 'storyName': '订单模块', 'remark': '加入购物车模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/cart/save', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'goods_id': '2', 'spec': [{'type': '套餐', 'value': '套餐二'}, {'type': '颜色', 'value': '银色'}, {'type': '容量', 'value': '64G'}], 'stock': 2}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '加入成功', 'OP_STR': '=='}}], '_case_name': '加入购物车成功-JSON格式'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/cart/save', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'goods_id': '2', 'spec': [{'type': '套餐', 'value': '套餐二'}, {'type': '颜色', 'value': '银色'}, {'type': '容量', 'value': '64G'}], 'stock': 2}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '加入成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '加入成功', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/attachments/6cf441aad8786a64.txt": "当前的测试数据： {'desc': '查询地址列表', 'featureName': '地址模块', 'storyName': '地址模块', 'remark': '地址列表模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_get', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/useraddress/index', 'application': 'app', 'token': '{{msg_token}}'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': 'success', 'OP_STR': '=='}}, {'通过JSONPATH提取数据-add_id': {'关键字': 'ex_jsonData', 'EXVALUE': '$..id', 'INDEX': 0, 'VARNAME': 'add_id'}}], '_case_name': '查询地址列表'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_get', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/useraddress/index', 'application': 'app', 'token': '{{msg_token}}'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': 'success', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': 'success', 'OP_STR': '=='}\n开始执行步骤：通过JSONPATH提取数据-add_id - {'关键字': 'ex_jsonData', 'EXVALUE': '$..id', 'INDEX': 0, 'VARNAME': 'add_id'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': 'success', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14586'}\n-----------------------\n--当前步骤执行结束--\n", 
 "data/attachments/6dcb82044ebaceb4.txt": "当前的测试数据： {'desc': '加入购物车成功-表单格式', 'featureName': '购物车模块', 'storyName': '订单模块', 'remark': '加入购物车模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/cart/save', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'goods_id': '2', 'spec': [{'type': '套餐', 'value': '套餐二'}, {'type': '颜色', 'value': '银色'}, {'type': '容量', 'value': '64G'}], 'stock': 2}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '加入成功', 'OP_STR': '=='}}], '_case_name': '加入购物车成功-表单格式'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/cart/save', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'goods_id': '2', 'spec': [{'type': '套餐', 'value': '套餐二'}, {'type': '颜色', 'value': '银色'}, {'type': '容量', 'value': '64G'}], 'stock': 2}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '加入成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '加入成功', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/attachments/7d469a7a70bd27fc.txt": "2024-10-09 03:08:23 DEBUG Starting new HTTP connection (1): 127.0.0.1:8080 connectionpool.py _new_conn 243", 
 "data/attachments/80b106d54bc60811.txt": "2024-10-09 03:08:16 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:16 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=api%2Fcart%2Fsave&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/813c08cf3e07812c.txt": "当前的测试数据： {'desc': '删除购物车成功', 'featureName': '购物车模块', 'storyName': '订单模块', 'remark': '查看购物车模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/cart/delete', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'id': '{{card_id_1}}'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '删除成功', 'OP_STR': '=='}}], '_case_name': '删除购物车成功'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/cart/delete', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'id': '{{card_id_1}}'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '删除成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '删除成功', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/attachments/9010743f5ccb597e.txt": "当前的测试数据： {'desc': 'T2-登录用例', 'featureName': '登录模块', 'storyName': '用户模块', 'remark': '登录模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/user/login', 'application': 'app'}, 'DATA': {'accounts': '{{username}}', 'pwd': '{{password}}', 'type': 'username'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'通过JSONPATH提取数据-TOKEN': {'关键字': 'ex_jsonData', 'EXVALUE': '$..token', 'INDEX': 0, 'VARNAME': 'msg_token'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '{{expected}}', 'OP_STR': '=='}}], 'context': {'username': 'hami', 'password': '123456', 'expected': '登录成功', 'desc': '正确的用户名和密码'}, '_case_name': 'T2-登录用例-正确的用户名和密码'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/user/login', 'application': 'app'}, 'DATA': {'accounts': '{{username}}', 'pwd': '{{password}}', 'type': 'username'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '登录成功'}\n-----------------------\n开始执行步骤：通过JSONPATH提取数据-TOKEN - {'关键字': 'ex_jsonData', 'EXVALUE': '$..token', 'INDEX': 0, 'VARNAME': 'msg_token'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '登录成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '{{expected}}', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/attachments/975e6a2dec1c0785.txt": "当前的测试数据： {'desc': '提交订单-商品详情', 'featureName': '提交订单模块', 'storyName': '订单模块', 'remark': '提交订单模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/buy/add', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'buy_type': 'goods', 'goods_id': 11, 'stock': 2, 'spec': [{'type': '尺寸', 'value': 'M'}], 'address_id': '{{add_id}}', 'payment_id': 4, 'user_note': '通过商品详情进行下单'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '提交成功', 'OP_STR': '=='}}], '_case_name': '提交订单-商品详情'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/buy/add', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'buy_type': 'goods', 'goods_id': 11, 'stock': 2, 'spec': [{'type': '尺寸', 'value': 'M'}], 'address_id': '{{add_id}}', 'payment_id': 4, 'user_note': '通过商品详情进行下单'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '提交成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14587'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '提交成功', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/attachments/a5fef75610a2f2bd.txt": "2024-10-09 03:08:16 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:17 DEBUG http://shop-xo.hctestedu.com:80 \"GET /?s=api%2Fcart%2Findex&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/ab58330f17ac0915.txt": "2024-10-09 03:08:16 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:16 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=%2Fapi%2Fuser%2Flogin&application=app HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/b5ef652f4852e771.txt": "当前的测试数据： {'desc': 'T2-登录用例', 'featureName': '登录模块', 'storyName': '用户模块', 'remark': '登录模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/user/login', 'application': 'app'}, 'DATA': {'accounts': '{{username}}', 'pwd': '{{password}}', 'type': 'username'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '{{expected}}', 'OP_STR': '=='}}, {'断言-全量断言-等于': {'关键字': 'assert_json_DeepDiff', 'json1': {'name': 'hami', 'age': 18}, 'json2': {'name': 'hami', 'age': 18}}}, {'断言-全量断言-过滤字段': {'关键字': 'assert_json_DeepDiff', 'json1': {'name': 'hami', 'age': 18, 'city': '长沙'}, 'json2': {'name': 'hami', 'age': 18}, '过滤字段': {'city': None}}}, {'断言-全量断言-不等于': {'关键字': 'assert_json_DeepDiff', 'json1': [1, 2, 3], 'json2': [1, 3, 2], '忽略顺序': True}}], 'context': {'username': 'hami', 'password': '123456', 'expected': '登录成功', 'desc': '正确的用户名和密码'}, '_case_name': 'T2-登录用例-正确的用户名和密码'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/user/login', 'application': 'app'}, 'DATA': {'accounts': '{{username}}', 'pwd': '{{password}}', 'type': 'username'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '登录成功'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '{{expected}}', 'OP_STR': '=='}\n开始执行步骤：断言-全量断言-等于 - {'关键字': 'assert_json_DeepDiff', 'json1': {'name': 'hami', 'age': 18}, 'json2': {'name': 'hami', 'age': 18}}\n开始执行步骤：断言-全量断言-过滤字段 - {'关键字': 'assert_json_DeepDiff', 'json1': {'name': 'hami', 'age': 18, 'city': '长沙'}, 'json2': {'name': 'hami', 'age': 18}, '过滤字段': {'city': None}}\n开始执行步骤：断言-全量断言-不等于 - {'关键字': 'assert_json_DeepDiff', 'json1': [1, 2, 3], 'json2': [1, 3, 2], '忽略顺序': True}\n--当前步骤执行结束--\n", 
 "data/attachments/c1333aa28343e097.txt": "2024-10-09 03:08:16 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:16 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=%2Fapi%2Fuser%2Flogin&application=app HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/cb18a662089daca4.txt": "2024-10-09 03:08:18 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:18 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=api%2Fuseraddress%2Fdelete&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/e642b66d783664d6.txt": "2024-10-09 03:08:17 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:17 DEBUG http://shop-xo.hctestedu.com:80 \"GET /?s=api%2Fuseraddress%2Findex&application=app&token=434f1d1572a7aab2910ad51eac08697f HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/eb6a2e54bbd87ada.txt": "当前的测试数据： {'desc': 'T2-登录用例', 'featureName': '登录模块', 'storyName': '用户模块', 'remark': '登录模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/user/login', 'application': 'app'}, 'DATA': {'accounts': '{{username}}', 'pwd': '{{password}}', 'type': 'username'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '{{expected}}', 'OP_STR': '=='}}, {'断言-全量断言-等于': {'关键字': 'assert_json_DeepDiff', 'json1': {'name': 'hami', 'age': 18}, 'json2': {'name': 'hami', 'age': 18}}}, {'断言-全量断言-过滤字段': {'关键字': 'assert_json_DeepDiff', 'json1': {'name': 'hami', 'age': 18, 'city': '长沙'}, 'json2': {'name': 'hami', 'age': 18}, '过滤字段': {'city': None}}}, {'断言-全量断言-不等于': {'关键字': 'assert_json_DeepDiff', 'json1': [1, 2, 3], 'json2': [1, 3, 2], '忽略顺序': True}}], 'context': {'username': 'hami', 'password': '1234567', 'expected': '密码错误', 'desc': '错误的用户名和密码'}, '_case_name': 'T2-登录用例-错误的用户名和密码'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_form_urlencoded', 'URL': '{{URL}}', 'PARAMS': {'s': '/api/user/login', 'application': 'app'}, 'DATA': {'accounts': '{{username}}', 'pwd': '{{password}}', 'type': 'username'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '密码错误'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '{{expected}}', 'OP_STR': '=='}\n开始执行步骤：断言-全量断言-等于 - {'关键字': 'assert_json_DeepDiff', 'json1': {'name': 'hami', 'age': 18}, 'json2': {'name': 'hami', 'age': 18}}\n开始执行步骤：断言-全量断言-过滤字段 - {'关键字': 'assert_json_DeepDiff', 'json1': {'name': 'hami', 'age': 18, 'city': '长沙'}, 'json2': {'name': 'hami', 'age': 18}, '过滤字段': {'city': None}}\n开始执行步骤：断言-全量断言-不等于 - {'关键字': 'assert_json_DeepDiff', 'json1': [1, 2, 3], 'json2': [1, 3, 2], '忽略顺序': True}\n--当前步骤执行结束--\n", 
 "data/attachments/ee581da4beb68ebc.txt": "2024-10-09 03:08:16 DEBUG Starting new HTTP connection (1): shop-xo.hctestedu.com:80 connectionpool.py _new_conn 243\n2024-10-09 03:08:16 DEBUG http://shop-xo.hctestedu.com:80 \"POST /?s=%2Fapi%2Fuser%2Flogin&application=app HTTP/11\" 200 None connectionpool.py _make_request 546", 
 "data/attachments/f7acbc72c1cddd8f.txt": "当前的测试数据： {'desc': '查询购物车列表数据', 'featureName': '购物车模块', 'storyName': '订单模块', 'remark': '查看购物车模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_get', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/cart/index', 'application': 'app', 'token': '{{msg_token}}'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': 'success', 'OP_STR': '=='}}, {'通过JSONPATH提取数据-购物车ID，用来删除': {'关键字': 'ex_jsonData', 'EXVALUE': '$..id', 'INDEX': 0, 'VARNAME': 'card_id_1'}}, {'通过JSONPATH提取数据--购物车ID，用来提交订单': {'关键字': 'ex_jsonData', 'EXVALUE': '$..id', 'INDEX': 1, 'VARNAME': 'card_id_2'}}], '_case_name': '查询购物车列表数据'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_get', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/cart/index', 'application': 'app', 'token': '{{msg_token}}'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': 'success', 'msg_token': '434f1d1572a7aab2910ad51eac08697f'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': 'success', 'OP_STR': '=='}\n开始执行步骤：通过JSONPATH提取数据-购物车ID，用来删除 - {'关键字': 'ex_jsonData', 'EXVALUE': '$..id', 'INDEX': 0, 'VARNAME': 'card_id_1'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': 'success', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839'}\n-----------------------\n开始执行步骤：通过JSONPATH提取数据--购物车ID，用来提交订单 - {'关键字': 'ex_jsonData', 'EXVALUE': '$..id', 'INDEX': 1, 'VARNAME': 'card_id_2'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': 'success', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833'}\n-----------------------\n--当前步骤执行结束--\n", 
 "data/attachments/fce5dc13382d7128.txt": "当前的测试数据： {'desc': '删除地址列表', 'featureName': '地址模块', 'storyName': '地址模块', 'remark': '地址删除模块备注', 'steps': [{'发送Post请求': {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/useraddress/delete', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'id': '{{add_id}}'}}}, {'通过JSONPATH提取数据-MSG': {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}}, {'断言-文本断言-等于': {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '删除成功', 'OP_STR': '=='}}], '_case_name': '删除地址列表'}\n开始执行步骤：发送Post请求 - {'关键字': 'request_post_row_json', 'URL': '{{URL}}', 'PARAMS': {'s': 'api/useraddress/delete', 'application': 'app', 'token': '{{msg_token}}'}, 'DATA': {'id': '{{add_id}}'}}\n开始执行步骤：通过JSONPATH提取数据-MSG - {'关键字': 'ex_jsonData', 'EXVALUE': '$..msg', 'INDEX': 0, 'VARNAME': 'msg_success'}\n-----------------------\n{'URL': 'http://shop-xo.hctestedu.com', '_database': {'mysql001': {'host': 'shop-xo.hctestedu.com', 'port': 3306, 'user': 'api_test', 'password': 'Aa9999!', 'db': 'shopxo_hctested'}}, 'username': 'hami1219', 'current_response': &lt;Response [200]&gt;, 'msg_success': '删除成功', 'msg_token': '434f1d1572a7aab2910ad51eac08697f', 'card_id_1': '28839', 'card_id_2': '28833', 'add_id': '14586'}\n-----------------------\n开始执行步骤：断言-文本断言-等于 - {'关键字': 'assert_text_comparators', 'VALUE': '{{msg_success}}', 'EXPECTED': '删除成功', 'OP_STR': '=='}\n--当前步骤执行结束--\n", 
 "data/test-cases/2185ce8ae78ddd71.json": "{\"uid\":\"2185ce8ae78ddd71\",\"name\":\"删除地址列表\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"8a78055d84aedd8b0f62abc4c206a2e8\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135},\"description\":\"地址删除模块备注\",\"descriptionHtml\":\"&lt;p&gt;地址删除模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"地址删除模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414498656,\"stop\":1728414498787,\"duration\":131},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-row_json\",\"time\":{\"start\":1728414498656,\"stop\":1728414498787,\"duration\":131},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_row_json'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/useraddress/delete', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"},{\"name\":\"DATA\",\"value\":\"{'id': '14586'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414498788,\"stop\":1728414498788,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414498788,\"stop\":1728414498788,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414498789,\"stop\":1728414498789,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414498789,\"stop\":1728414498789,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'删除成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'删除成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"cb18a662089daca4\",\"name\":\"log\",\"source\":\"cb18a662089daca4.txt\",\"type\":\"text/plain\",\"size\":320},{\"uid\":\"fce5dc13382d7128\",\"name\":\"stdout\",\"source\":\"fce5dc13382d7128.txt\",\"type\":\"text/plain\",\"size\":1662}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"地址模块\"},{\"name\":\"feature\",\"value\":\"地址模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"2185ce8ae78ddd71.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/3a3ea388a40212e2.json": "{\"uid\":\"3a3ea388a40212e2\",\"name\":\"加入购物车成功-表单格式\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"830291ab8dcfcc947801096a47e03a73\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148},\"description\":\"加入购物车模块备注\",\"descriptionHtml\":\"&lt;p&gt;加入购物车模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"加入购物车模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414496555,\"stop\":1728414496700,\"duration\":145},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-form_urlencoded\",\"time\":{\"start\":1728414496556,\"stop\":1728414496700,\"duration\":144},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_form_urlencoded'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/cart/save', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"},{\"name\":\"DATA\",\"value\":\"{'goods_id': '2', 'spec': [{'type': '套餐', 'value': '套餐二'}, {'type': '颜色', 'value': '银色'}, {'type': '容量', 'value': '64G'}], 'stock': 2}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414496701,\"stop\":1728414496701,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414496701,\"stop\":1728414496701,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414496702,\"stop\":1728414496702,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414496702,\"stop\":1728414496702,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'加入成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'加入成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"80b106d54bc60811\",\"name\":\"log\",\"source\":\"80b106d54bc60811.txt\",\"type\":\"text/plain\",\"size\":311},{\"uid\":\"6dcb82044ebaceb4\",\"name\":\"stdout\",\"source\":\"6dcb82044ebaceb4.txt\",\"type\":\"text/plain\",\"size\":1905}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"订单模块\"},{\"name\":\"feature\",\"value\":\"购物车模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"3a3ea388a40212e2.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/44f6c54e2a9b8299.json": "{\"uid\":\"44f6c54e2a9b8299\",\"name\":\"提交订单-商品详情\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"bf465e5b2728b681bc8b331c9c9134c7\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168},\"description\":\"提交订单模块备注\",\"descriptionHtml\":\"&lt;p&gt;提交订单模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"提交订单模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414500888,\"stop\":1728414501051,\"duration\":163},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-row_json\",\"time\":{\"start\":1728414500888,\"stop\":1728414501051,\"duration\":163},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_row_json'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': '/api/buy/add', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"},{\"name\":\"DATA\",\"value\":\"{'buy_type': 'goods', 'goods_id': 11, 'stock': 2, 'spec': [{'type': '尺寸', 'value': 'M'}], 'address_id': '14587', 'payment_id': 4, 'user_note': '通过商品详情进行下单'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414501052,\"stop\":1728414501053,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414501052,\"stop\":1728414501053,\"duration\":1},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414501053,\"stop\":1728414501054,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414501054,\"stop\":1728414501054,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'提交成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'提交成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"1f566bb19c97218\",\"name\":\"log\",\"source\":\"1f566bb19c97218.txt\",\"type\":\"text/plain\",\"size\":312},{\"uid\":\"975e6a2dec1c0785\",\"name\":\"stdout\",\"source\":\"975e6a2dec1c0785.txt\",\"type\":\"text/plain\",\"size\":1992}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"订单模块\"},{\"name\":\"feature\",\"value\":\"提交订单模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"44f6c54e2a9b8299.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/507442bfe1017b59.json": "{\"uid\":\"507442bfe1017b59\",\"name\":\"加入购物车成功-JSON格式\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"599c7af1a0c9f4120e30e1b61ea55f26\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158},\"description\":\"加入购物车模块备注\",\"descriptionHtml\":\"&lt;p&gt;加入购物车模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"加入购物车模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414496708,\"stop\":1728414496863,\"duration\":155},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-row_json\",\"time\":{\"start\":1728414496708,\"stop\":1728414496863,\"duration\":155},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_row_json'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/cart/save', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"},{\"name\":\"DATA\",\"value\":\"{'goods_id': '2', 'spec': [{'type': '套餐', 'value': '套餐二'}, {'type': '颜色', 'value': '银色'}, {'type': '容量', 'value': '64G'}], 'stock': 2}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414496864,\"stop\":1728414496864,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414496864,\"stop\":1728414496864,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414496865,\"stop\":1728414496865,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414496865,\"stop\":1728414496865,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'加入成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'加入成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"313cb6aff85d7d3b\",\"name\":\"log\",\"source\":\"313cb6aff85d7d3b.txt\",\"type\":\"text/plain\",\"size\":311},{\"uid\":\"65b4e3182729e996\",\"name\":\"stdout\",\"source\":\"65b4e3182729e996.txt\",\"type\":\"text/plain\",\"size\":1887}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"订单模块\"},{\"name\":\"feature\",\"value\":\"购物车模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"507442bfe1017b59.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/56991eb67b28e2e1.json": "{\"uid\":\"56991eb67b28e2e1\",\"name\":\"加密接口-错误的用户名和密码\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"70f19a6af75b9167474f6ec808118c6a\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"description\":\"登录模块备注\",\"descriptionHtml\":\"&lt;p&gt;登录模块备注&lt;/p&gt;\\n\",\"status\":\"broken\",\"statusMessage\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\",\"statusTrace\":\"self = &lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;\\n\\n    def _new_conn(self) -&gt; socket.socket:\\n        \\\"\\\"\\\"Establish a socket connection and set nodelay settings on it.\\n    \\n        :return: New socket connection.\\n        \\\"\\\"\\\"\\n        try:\\n&gt;           sock = connection.create_connection(\\n                (self._dns_host, self.port),\\n                self.timeout,\\n                source_address=self.source_address,\\n                socket_options=self.socket_options,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:199: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\connection.py:85: in create_connection\\n    raise err\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\naddress = ('127.0.0.1', 8080), timeout = None, source_address = None\\nsocket_options = [(6, 1, 1)]\\n\\n    def create_connection(\\n        address: tuple[str, int],\\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\\n        source_address: tuple[str, int] | None = None,\\n        socket_options: _TYPE_SOCKET_OPTIONS | None = None,\\n    ) -&gt; socket.socket:\\n        \\\"\\\"\\\"Connect to *address* and return the socket object.\\n    \\n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\\n        port)``) and return the socket object.  Passing the optional\\n        *timeout* parameter will set the timeout on the socket instance\\n        before attempting to connect.  If no *timeout* is supplied, the\\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\\n        is used.  If *source_address* is set it must be a tuple of (host, port)\\n        for the socket to bind as a source address before making the connection.\\n        An host of '' or port 0 tells the OS to use the default.\\n        \\\"\\\"\\\"\\n    \\n        host, port = address\\n        if host.startswith(\\\"[\\\"):\\n            host = host.strip(\\\"[]\\\")\\n        err = None\\n    \\n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\\n        # The original create_connection function always returns all records.\\n        family = allowed_gai_family()\\n    \\n        try:\\n            host.encode(\\\"idna\\\")\\n        except UnicodeError:\\n            raise LocationParseError(f\\\"'{host}', label empty or too long\\\") from None\\n    \\n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\\n            af, socktype, proto, canonname, sa = res\\n            sock = None\\n            try:\\n                sock = socket.socket(af, socktype, proto)\\n    \\n                # If provided, set socket level options before connecting.\\n                _set_socket_options(sock, socket_options)\\n    \\n                if timeout is not _DEFAULT_TIMEOUT:\\n                    sock.settimeout(timeout)\\n                if source_address:\\n                    sock.bind(source_address)\\n&gt;               sock.connect(sa)\\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\connection.py:73: ConnectionRefusedError\\n\\nThe above exception was the direct cause of the following exception:\\n\\nself = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000022BD7BA5450&gt;\\nmethod = 'POST', url = '/login_safe'\\nbody = 'password=Sd7dHpyVfDorD9Pws7ogPg%3D%3D&username=JK1ZBV2UdsDlY69wOMgd2w%3D%3D'\\nheaders = {'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '75', 'Content-Type': 'application/x-www-form-urlencoded'}\\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\\nredirect = False, assert_same_host = False\\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\\ndecode_content = False, response_kw = {}\\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/login_safe', query=None, fragment=None)\\ndestination_scheme = None, conn = None, release_this_conn = True\\nhttp_tunnel_required = False, err = None, clean_exit = False\\n\\n    def urlopen(  # type: ignore[override]\\n        self,\\n        method: str,\\n        url: str,\\n        body: _TYPE_BODY | None = None,\\n        headers: typing.Mapping[str, str] | None = None,\\n        retries: Retry | bool | int | None = None,\\n        redirect: bool = True,\\n        assert_same_host: bool = True,\\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\\n        pool_timeout: int | None = None,\\n        release_conn: bool | None = None,\\n        chunked: bool = False,\\n        body_pos: _TYPE_BODY_POSITION | None = None,\\n        preload_content: bool = True,\\n        decode_content: bool = True,\\n        **response_kw: typing.Any,\\n    ) -&gt; BaseHTTPResponse:\\n        \\\"\\\"\\\"\\n        Get a connection from the pool and perform an HTTP request. This is the\\n        lowest level call for making a request, so you'll need to specify all\\n        the raw details.\\n    \\n        .. note::\\n    \\n           More commonly, it's appropriate to use a convenience method\\n           such as :meth:`request`.\\n    \\n        .. note::\\n    \\n           `release_conn` will only behave as expected if\\n           `preload_content=False` because we want to make\\n           `preload_content=False` the default behaviour someday soon without\\n           breaking backwards compatibility.\\n    \\n        :param method:\\n            HTTP request method (such as GET, POST, PUT, etc.)\\n    \\n        :param url:\\n            The URL to perform the request on.\\n    \\n        :param body:\\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\\n    \\n        :param headers:\\n            Dictionary of custom headers to send, such as User-Agent,\\n            If-None-Match, etc. If None, pool headers are used. If provided,\\n            these headers completely replace any pool-specific headers.\\n    \\n        :param retries:\\n            Configure the number of retries to allow before raising a\\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\\n    \\n            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a\\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\\n            over different types of retries.\\n            Pass an integer number to retry connection errors that many times,\\n            but no other types of errors. Pass zero to never retry.\\n    \\n            If ``False``, then retries are disabled and any exception is raised\\n            immediately. Also, instead of raising a MaxRetryError on redirects,\\n            the redirect response will be returned.\\n    \\n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\\n    \\n        :param redirect:\\n            If True, automatically handle redirects (status codes 301, 302,\\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\\n            will disable redirect, too.\\n    \\n        :param assert_same_host:\\n            If ``True``, will make sure that the host of the pool requests is\\n            consistent else will raise HostChangedError. When ``False``, you can\\n            use the pool on an HTTP proxy and request foreign hosts.\\n    \\n        :param timeout:\\n            If specified, overrides the default timeout for this one\\n            request. It may be a float (in seconds) or an instance of\\n            :class:`urllib3.util.Timeout`.\\n    \\n        :param pool_timeout:\\n            If set and the pool is set to block=True, then this method will\\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\\n            connection is available within the time period.\\n    \\n        :param bool preload_content:\\n            If True, the response's body will be preloaded into memory.\\n    \\n        :param bool decode_content:\\n            If True, will attempt to decode the body based on the\\n            'content-encoding' header.\\n    \\n        :param release_conn:\\n            If False, then the urlopen call will not release the connection\\n            back into the pool once a response is received (but will release if\\n            you read the entire contents of the response such as when\\n            `preload_content=True`). This is useful if you're not preloading\\n            the response's content immediately. You will need to call\\n            ``r.release_conn()`` on the response ``r`` to return the connection\\n            back into the pool. If None, it takes the value of ``preload_content``\\n            which defaults to ``True``.\\n    \\n        :param bool chunked:\\n            If True, urllib3 will send the body using chunked transfer\\n            encoding. Otherwise, urllib3 will send the body using the standard\\n            content-length form. Defaults to False.\\n    \\n        :param int body_pos:\\n            Position to seek to in file-like body in the event of a retry or\\n            redirect. Typically this won't need to be set because urllib3 will\\n            auto-populate the value when needed.\\n        \\\"\\\"\\\"\\n        parsed_url = parse_url(url)\\n        destination_scheme = parsed_url.scheme\\n    \\n        if headers is None:\\n            headers = self.headers\\n    \\n        if not isinstance(retries, Retry):\\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\\n    \\n        if release_conn is None:\\n            release_conn = preload_content\\n    \\n        # Check host\\n        if assert_same_host and not self.is_same_host(url):\\n            raise HostChangedError(self, url, retries)\\n    \\n        # Ensure that the URL we're connecting to is properly encoded\\n        if url.startswith(\\\"/\\\"):\\n            url = to_str(_encode_target(url))\\n        else:\\n            url = to_str(parsed_url.url)\\n    \\n        conn = None\\n    \\n        # Track whether `conn` needs to be released before\\n        # returning/raising/recursing. Update this variable if necessary, and\\n        # leave `release_conn` constant throughout the function. That way, if\\n        # the function recurses, the original value of `release_conn` will be\\n        # passed down into the recursive call, and its value will be respected.\\n        #\\n        # See issue #651 [1] for details.\\n        #\\n        # [1] &lt;https://github.com/urllib3/urllib3/issues/651&gt;\\n        release_this_conn = release_conn\\n    \\n        http_tunnel_required = connection_requires_http_tunnel(\\n            self.proxy, self.proxy_config, destination_scheme\\n        )\\n    \\n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\\n        # have to copy the headers dict so we can safely change it without those\\n        # changes being reflected in anyone else's copy.\\n        if not http_tunnel_required:\\n            headers = headers.copy()  # type: ignore[attr-defined]\\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\\n    \\n        # Must keep the exception bound to a separate variable or else Python 3\\n        # complains about UnboundLocalError.\\n        err = None\\n    \\n        # Keep track of whether we cleanly exited the except block. This\\n        # ensures we do proper cleanup in finally.\\n        clean_exit = False\\n    \\n        # Rewind body position, if needed. Record current position\\n        # for future rewinds in the event of a redirect/retry.\\n        body_pos = set_file_position(body, body_pos)\\n    \\n        try:\\n            # Request a connection from the queue.\\n            timeout_obj = self._get_timeout(timeout)\\n            conn = self._get_conn(timeout=pool_timeout)\\n    \\n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\\n    \\n            # Is this a closed/new connection that requires CONNECT tunnelling?\\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\\n                try:\\n                    self._prepare_proxy(conn)\\n                except (BaseSSLError, OSError, SocketTimeout) as e:\\n                    self._raise_timeout(\\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\\n                    )\\n                    raise\\n    \\n            # If we're going to release the connection in ``finally:``, then\\n            # the response doesn't need to know about the connection. Otherwise\\n            # it will also try to release it and we'll have a double-release\\n            # mess.\\n            response_conn = conn if not release_conn else None\\n    \\n            # Make the request on the HTTPConnection object\\n&gt;           response = self._make_request(\\n                conn,\\n                method,\\n                url,\\n                timeout=timeout_obj,\\n                body=body,\\n                headers=headers,\\n                chunked=chunked,\\n                retries=retries,\\n                response_conn=response_conn,\\n                preload_content=preload_content,\\n                decode_content=decode_content,\\n                **response_kw,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:789: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:495: in _make_request\\n    conn.request(\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:441: in request\\n    self.endheaders()\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:1278: in endheaders\\n    self._send_output(message_body, encode_chunked=encode_chunked)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:1038: in _send_output\\n    self.send(msg)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:976: in send\\n    self.connect()\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:279: in connect\\n    self.sock = self._new_conn()\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = &lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;\\n\\n    def _new_conn(self) -&gt; socket.socket:\\n        \\\"\\\"\\\"Establish a socket connection and set nodelay settings on it.\\n    \\n        :return: New socket connection.\\n        \\\"\\\"\\\"\\n        try:\\n            sock = connection.create_connection(\\n                (self._dns_host, self.port),\\n                self.timeout,\\n                source_address=self.source_address,\\n                socket_options=self.socket_options,\\n            )\\n        except socket.gaierror as e:\\n            raise NameResolutionError(self.host, self, e) from e\\n        except SocketTimeout as e:\\n            raise ConnectTimeoutError(\\n                self,\\n                f\\\"Connection to {self.host} timed out. (connect timeout={self.timeout})\\\",\\n            ) from e\\n    \\n        except OSError as e:\\n&gt;           raise NewConnectionError(\\n                self, f\\\"Failed to establish a new connection: {e}\\\"\\n            ) from e\\nE           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:214: NewConnectionError\\n\\nThe above exception was the direct cause of the following exception:\\n\\nself = &lt;requests.adapters.HTTPAdapter object at 0x0000022BD7BA4340&gt;\\nrequest = &lt;PreparedRequest [POST]&gt;, stream = False\\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\\ncert = None, proxies = OrderedDict()\\n\\n    def send(\\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\\n    ):\\n        \\\"\\\"\\\"Sends PreparedRequest object. Returns Response object.\\n    \\n        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.\\n        :param stream: (optional) Whether to stream the request content.\\n        :param timeout: (optional) How long to wait for the server to send\\n            data before giving up, as a float, or a :ref:`(connect timeout,\\n            read timeout) &lt;timeouts&gt;` tuple.\\n        :type timeout: float or tuple or urllib3 Timeout object\\n        :param verify: (optional) Either a boolean, in which case it controls whether\\n            we verify the server's TLS certificate, or a string, in which case it\\n            must be a path to a CA bundle to use\\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\\n        :param proxies: (optional) The proxies dictionary to apply to the request.\\n        :rtype: requests.Response\\n        \\\"\\\"\\\"\\n    \\n        try:\\n            conn = self.get_connection_with_tls_context(\\n                request, verify, proxies=proxies, cert=cert\\n            )\\n        except LocationValueError as e:\\n            raise InvalidURL(e, request=request)\\n    \\n        self.cert_verify(conn, request.url, verify, cert)\\n        url = self.request_url(request, proxies)\\n        self.add_headers(\\n            request,\\n            stream=stream,\\n            timeout=timeout,\\n            verify=verify,\\n            cert=cert,\\n            proxies=proxies,\\n        )\\n    \\n        chunked = not (request.body is None or \\\"Content-Length\\\" in request.headers)\\n    \\n        if isinstance(timeout, tuple):\\n            try:\\n                connect, read = timeout\\n                timeout = TimeoutSauce(connect=connect, read=read)\\n            except ValueError:\\n                raise ValueError(\\n                    f\\\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \\\"\\n                    f\\\"or a single float to set both timeouts to the same value.\\\"\\n                )\\n        elif isinstance(timeout, TimeoutSauce):\\n            pass\\n        else:\\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\\n    \\n        try:\\n&gt;           resp = conn.urlopen(\\n                method=request.method,\\n                url=url,\\n                body=request.body,\\n                headers=request.headers,\\n                redirect=False,\\n                assert_same_host=False,\\n                preload_content=False,\\n                decode_content=False,\\n                retries=self.max_retries,\\n                timeout=timeout,\\n                chunked=chunked,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py:667: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:843: in urlopen\\n    retries = retries.increment(\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\\nmethod = 'POST', url = '/login_safe', response = None\\nerror = NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。')\\n_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000022BD7BA5450&gt;\\n_stacktrace = &lt;traceback object at 0x0000022BD7DB9600&gt;\\n\\n    def increment(\\n        self,\\n        method: str | None = None,\\n        url: str | None = None,\\n        response: BaseHTTPResponse | None = None,\\n        error: Exception | None = None,\\n        _pool: ConnectionPool | None = None,\\n        _stacktrace: TracebackType | None = None,\\n    ) -&gt; Self:\\n        \\\"\\\"\\\"Return a new Retry object with incremented retry counters.\\n    \\n        :param response: A response object, or None, if the server did not\\n            return a response.\\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\\n        :param Exception error: An error encountered during the request, or\\n            None if the response was received successfully.\\n    \\n        :return: A new ``Retry`` object.\\n        \\\"\\\"\\\"\\n        if self.total is False and error:\\n            # Disabled, indicate to re-raise the error.\\n            raise reraise(type(error), error, _stacktrace)\\n    \\n        total = self.total\\n        if total is not None:\\n            total -= 1\\n    \\n        connect = self.connect\\n        read = self.read\\n        redirect = self.redirect\\n        status_count = self.status\\n        other = self.other\\n        cause = \\\"unknown\\\"\\n        status = None\\n        redirect_location = None\\n    \\n        if error and self._is_connection_error(error):\\n            # Connect retry?\\n            if connect is False:\\n                raise reraise(type(error), error, _stacktrace)\\n            elif connect is not None:\\n                connect -= 1\\n    \\n        elif error and self._is_read_error(error):\\n            # Read retry?\\n            if read is False or method is None or not self._is_method_retryable(method):\\n                raise reraise(type(error), error, _stacktrace)\\n            elif read is not None:\\n                read -= 1\\n    \\n        elif error:\\n            # Other retry?\\n            if other is not None:\\n                other -= 1\\n    \\n        elif response and response.get_redirect_location():\\n            # Redirect retry?\\n            if redirect is not None:\\n                redirect -= 1\\n            cause = \\\"too many redirects\\\"\\n            response_redirect_location = response.get_redirect_location()\\n            if response_redirect_location:\\n                redirect_location = response_redirect_location\\n            status = response.status\\n    \\n        else:\\n            # Incrementing because of a server error like a 500 in\\n            # status_forcelist and the given method is in the allowed_methods\\n            cause = ResponseError.GENERIC_ERROR\\n            if response and response.status:\\n                if status_count is not None:\\n                    status_count -= 1\\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\\n                status = response.status\\n    \\n        history = self.history + (\\n            RequestHistory(method, url, error, status, redirect_location),\\n        )\\n    \\n        new_retry = self.new(\\n            total=total,\\n            connect=connect,\\n            read=read,\\n            redirect=redirect,\\n            status=status_count,\\n            other=other,\\n            history=history,\\n        )\\n    \\n        if new_retry.is_exhausted():\\n            reason = error or ResponseError(cause)\\n&gt;           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\retry.py:519: MaxRetryError\\n\\nDuring handling of the above exception, another exception occurred:\\n\\nself = &lt;apirun.core.ApiTestRunner.TestRunner object at 0x0000022BD7731690&gt;\\ncaseinfo = {'_case_name': '加密接口-错误的用户名和密码', 'context': {'desc': '错误的用户名和密码', 'password': '1234567', 'username': 'hami'}, 'desc': '加密接口', 'featureName': '登录模块', ...}\\n\\n    def test_case_execute(self, caseinfo):\\n        print(\\\"当前的测试数据：\\\", caseinfo)\\n        # TODO 2-1: 动态生成一下当前的测试用例标题\\n        # allure.dynamic.title(caseinfo[\\\"_case_name\\\"])\\n    \\n        # TODO 2-1 : 调用动态生成标题的方法\\n        dynamicTitle(caseinfo)\\n    \\n        # TODO 2-2: 基于我们步骤一步步进行执行\\n        try:\\n            # 实例化关键字对象\\n            keywords = KeyWords()\\n    \\n            # 获取当前用例变量，方便后续的渲染\\n            local_context = caseinfo.get(\\\"context\\\",{})\\n            context = copy.deepcopy(g_context().show_dict())\\n            context.update(local_context)\\n    \\n            steps = caseinfo.get(\\\"steps\\\", None)\\n            for step in steps:\\n                #  提示信息\\n                step_name = list(step.keys())[0]\\n                step_value = list(step.values())[0]\\n                print(f\\\"开始执行步骤：{step_name} - {step_value}\\\")\\n    \\n                # TODO : 每一个步骤进行变量的渲染\\n                context = copy.deepcopy(g_context().show_dict())\\n                context.update(local_context)\\n                step_value = eval(refresh(step_value, context))\\n    \\n                # 基于每个步骤的关键字，找到对应的方法，然后把参数给它\\n                #  通过【反射】的方式去找到对应的方法\\n                with allure.step(step_name):\\n                    key = step_value[\\\"关键字\\\"]  # 具体的方法名, 在 keywords 里面找到这个方法\\n                    try:\\n                        key_func = keywords.__getattribute__(key)  # 从keywords获取到对应方法\\n                    except AttributeError as e:\\n                        print(\\\"没有这个关键字方法\\\", e)\\n&gt;                   key_func(**step_value)  # 调用方法\\n\\ncore\\\\ApiTestRunner.py:62: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nextend\\\\keywords.py:79: in request_post_form_urlencoded\\n    response = requests.post(**request_data)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py:115: in post\\n    return request(\\\"post\\\", url, data=data, json=json, **kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py:59: in request\\n    return session.request(method=method, url=url, **kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py:589: in request\\n    resp = self.send(prep, **send_kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py:703: in send\\n    r = adapter.send(request, **kwargs)\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = &lt;requests.adapters.HTTPAdapter object at 0x0000022BD7BA4340&gt;\\nrequest = &lt;PreparedRequest [POST]&gt;, stream = False\\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\\ncert = None, proxies = OrderedDict()\\n\\n    def send(\\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\\n    ):\\n        \\\"\\\"\\\"Sends PreparedRequest object. Returns Response object.\\n    \\n        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.\\n        :param stream: (optional) Whether to stream the request content.\\n        :param timeout: (optional) How long to wait for the server to send\\n            data before giving up, as a float, or a :ref:`(connect timeout,\\n            read timeout) &lt;timeouts&gt;` tuple.\\n        :type timeout: float or tuple or urllib3 Timeout object\\n        :param verify: (optional) Either a boolean, in which case it controls whether\\n            we verify the server's TLS certificate, or a string, in which case it\\n            must be a path to a CA bundle to use\\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\\n        :param proxies: (optional) The proxies dictionary to apply to the request.\\n        :rtype: requests.Response\\n        \\\"\\\"\\\"\\n    \\n        try:\\n            conn = self.get_connection_with_tls_context(\\n                request, verify, proxies=proxies, cert=cert\\n            )\\n        except LocationValueError as e:\\n            raise InvalidURL(e, request=request)\\n    \\n        self.cert_verify(conn, request.url, verify, cert)\\n        url = self.request_url(request, proxies)\\n        self.add_headers(\\n            request,\\n            stream=stream,\\n            timeout=timeout,\\n            verify=verify,\\n            cert=cert,\\n            proxies=proxies,\\n        )\\n    \\n        chunked = not (request.body is None or \\\"Content-Length\\\" in request.headers)\\n    \\n        if isinstance(timeout, tuple):\\n            try:\\n                connect, read = timeout\\n                timeout = TimeoutSauce(connect=connect, read=read)\\n            except ValueError:\\n                raise ValueError(\\n                    f\\\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \\\"\\n                    f\\\"or a single float to set both timeouts to the same value.\\\"\\n                )\\n        elif isinstance(timeout, TimeoutSauce):\\n            pass\\n        else:\\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\\n    \\n        try:\\n            resp = conn.urlopen(\\n                method=request.method,\\n                url=url,\\n                body=request.body,\\n                headers=request.headers,\\n                redirect=False,\\n                assert_same_host=False,\\n                preload_content=False,\\n                decode_content=False,\\n                retries=self.max_retries,\\n                timeout=timeout,\\n                chunked=chunked,\\n            )\\n    \\n        except (ProtocolError, OSError) as err:\\n            raise ConnectionError(err, request=request)\\n    \\n        except MaxRetryError as e:\\n            if isinstance(e.reason, ConnectTimeoutError):\\n                # TODO: Remove this in 3.0.0: see #2811\\n                if not isinstance(e.reason, NewConnectionError):\\n                    raise ConnectTimeout(e, request=request)\\n    \\n            if isinstance(e.reason, ResponseError):\\n                raise RetryError(e, request=request)\\n    \\n            if isinstance(e.reason, _ProxyError):\\n                raise ProxyError(e, request=request)\\n    \\n            if isinstance(e.reason, _SSLError):\\n                # This branch is for urllib3 v1.22 and later.\\n                raise SSLError(e, request=request)\\n    \\n&gt;           raise ConnectionError(e, request=request)\\nE           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py:700: ConnectionError\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"登录模块备注\",\"status\":\"broken\",\"statusMessage\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\",\"statusTrace\":\"self = &lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;\\n\\n    def _new_conn(self) -&gt; socket.socket:\\n        \\\"\\\"\\\"Establish a socket connection and set nodelay settings on it.\\n    \\n        :return: New socket connection.\\n        \\\"\\\"\\\"\\n        try:\\n&gt;           sock = connection.create_connection(\\n                (self._dns_host, self.port),\\n                self.timeout,\\n                source_address=self.source_address,\\n                socket_options=self.socket_options,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:199: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\connection.py:85: in create_connection\\n    raise err\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\naddress = ('127.0.0.1', 8080), timeout = None, source_address = None\\nsocket_options = [(6, 1, 1)]\\n\\n    def create_connection(\\n        address: tuple[str, int],\\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\\n        source_address: tuple[str, int] | None = None,\\n        socket_options: _TYPE_SOCKET_OPTIONS | None = None,\\n    ) -&gt; socket.socket:\\n        \\\"\\\"\\\"Connect to *address* and return the socket object.\\n    \\n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\\n        port)``) and return the socket object.  Passing the optional\\n        *timeout* parameter will set the timeout on the socket instance\\n        before attempting to connect.  If no *timeout* is supplied, the\\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\\n        is used.  If *source_address* is set it must be a tuple of (host, port)\\n        for the socket to bind as a source address before making the connection.\\n        An host of '' or port 0 tells the OS to use the default.\\n        \\\"\\\"\\\"\\n    \\n        host, port = address\\n        if host.startswith(\\\"[\\\"):\\n            host = host.strip(\\\"[]\\\")\\n        err = None\\n    \\n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\\n        # The original create_connection function always returns all records.\\n        family = allowed_gai_family()\\n    \\n        try:\\n            host.encode(\\\"idna\\\")\\n        except UnicodeError:\\n            raise LocationParseError(f\\\"'{host}', label empty or too long\\\") from None\\n    \\n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\\n            af, socktype, proto, canonname, sa = res\\n            sock = None\\n            try:\\n                sock = socket.socket(af, socktype, proto)\\n    \\n                # If provided, set socket level options before connecting.\\n                _set_socket_options(sock, socket_options)\\n    \\n                if timeout is not _DEFAULT_TIMEOUT:\\n                    sock.settimeout(timeout)\\n                if source_address:\\n                    sock.bind(source_address)\\n&gt;               sock.connect(sa)\\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\connection.py:73: ConnectionRefusedError\\n\\nThe above exception was the direct cause of the following exception:\\n\\nself = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000022BD7BA5450&gt;\\nmethod = 'POST', url = '/login_safe'\\nbody = 'password=Sd7dHpyVfDorD9Pws7ogPg%3D%3D&username=JK1ZBV2UdsDlY69wOMgd2w%3D%3D'\\nheaders = {'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '75', 'Content-Type': 'application/x-www-form-urlencoded'}\\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\\nredirect = False, assert_same_host = False\\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\\ndecode_content = False, response_kw = {}\\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/login_safe', query=None, fragment=None)\\ndestination_scheme = None, conn = None, release_this_conn = True\\nhttp_tunnel_required = False, err = None, clean_exit = False\\n\\n    def urlopen(  # type: ignore[override]\\n        self,\\n        method: str,\\n        url: str,\\n        body: _TYPE_BODY | None = None,\\n        headers: typing.Mapping[str, str] | None = None,\\n        retries: Retry | bool | int | None = None,\\n        redirect: bool = True,\\n        assert_same_host: bool = True,\\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\\n        pool_timeout: int | None = None,\\n        release_conn: bool | None = None,\\n        chunked: bool = False,\\n        body_pos: _TYPE_BODY_POSITION | None = None,\\n        preload_content: bool = True,\\n        decode_content: bool = True,\\n        **response_kw: typing.Any,\\n    ) -&gt; BaseHTTPResponse:\\n        \\\"\\\"\\\"\\n        Get a connection from the pool and perform an HTTP request. This is the\\n        lowest level call for making a request, so you'll need to specify all\\n        the raw details.\\n    \\n        .. note::\\n    \\n           More commonly, it's appropriate to use a convenience method\\n           such as :meth:`request`.\\n    \\n        .. note::\\n    \\n           `release_conn` will only behave as expected if\\n           `preload_content=False` because we want to make\\n           `preload_content=False` the default behaviour someday soon without\\n           breaking backwards compatibility.\\n    \\n        :param method:\\n            HTTP request method (such as GET, POST, PUT, etc.)\\n    \\n        :param url:\\n            The URL to perform the request on.\\n    \\n        :param body:\\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\\n    \\n        :param headers:\\n            Dictionary of custom headers to send, such as User-Agent,\\n            If-None-Match, etc. If None, pool headers are used. If provided,\\n            these headers completely replace any pool-specific headers.\\n    \\n        :param retries:\\n            Configure the number of retries to allow before raising a\\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\\n    \\n            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a\\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\\n            over different types of retries.\\n            Pass an integer number to retry connection errors that many times,\\n            but no other types of errors. Pass zero to never retry.\\n    \\n            If ``False``, then retries are disabled and any exception is raised\\n            immediately. Also, instead of raising a MaxRetryError on redirects,\\n            the redirect response will be returned.\\n    \\n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\\n    \\n        :param redirect:\\n            If True, automatically handle redirects (status codes 301, 302,\\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\\n            will disable redirect, too.\\n    \\n        :param assert_same_host:\\n            If ``True``, will make sure that the host of the pool requests is\\n            consistent else will raise HostChangedError. When ``False``, you can\\n            use the pool on an HTTP proxy and request foreign hosts.\\n    \\n        :param timeout:\\n            If specified, overrides the default timeout for this one\\n            request. It may be a float (in seconds) or an instance of\\n            :class:`urllib3.util.Timeout`.\\n    \\n        :param pool_timeout:\\n            If set and the pool is set to block=True, then this method will\\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\\n            connection is available within the time period.\\n    \\n        :param bool preload_content:\\n            If True, the response's body will be preloaded into memory.\\n    \\n        :param bool decode_content:\\n            If True, will attempt to decode the body based on the\\n            'content-encoding' header.\\n    \\n        :param release_conn:\\n            If False, then the urlopen call will not release the connection\\n            back into the pool once a response is received (but will release if\\n            you read the entire contents of the response such as when\\n            `preload_content=True`). This is useful if you're not preloading\\n            the response's content immediately. You will need to call\\n            ``r.release_conn()`` on the response ``r`` to return the connection\\n            back into the pool. If None, it takes the value of ``preload_content``\\n            which defaults to ``True``.\\n    \\n        :param bool chunked:\\n            If True, urllib3 will send the body using chunked transfer\\n            encoding. Otherwise, urllib3 will send the body using the standard\\n            content-length form. Defaults to False.\\n    \\n        :param int body_pos:\\n            Position to seek to in file-like body in the event of a retry or\\n            redirect. Typically this won't need to be set because urllib3 will\\n            auto-populate the value when needed.\\n        \\\"\\\"\\\"\\n        parsed_url = parse_url(url)\\n        destination_scheme = parsed_url.scheme\\n    \\n        if headers is None:\\n            headers = self.headers\\n    \\n        if not isinstance(retries, Retry):\\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\\n    \\n        if release_conn is None:\\n            release_conn = preload_content\\n    \\n        # Check host\\n        if assert_same_host and not self.is_same_host(url):\\n            raise HostChangedError(self, url, retries)\\n    \\n        # Ensure that the URL we're connecting to is properly encoded\\n        if url.startswith(\\\"/\\\"):\\n            url = to_str(_encode_target(url))\\n        else:\\n            url = to_str(parsed_url.url)\\n    \\n        conn = None\\n    \\n        # Track whether `conn` needs to be released before\\n        # returning/raising/recursing. Update this variable if necessary, and\\n        # leave `release_conn` constant throughout the function. That way, if\\n        # the function recurses, the original value of `release_conn` will be\\n        # passed down into the recursive call, and its value will be respected.\\n        #\\n        # See issue #651 [1] for details.\\n        #\\n        # [1] &lt;https://github.com/urllib3/urllib3/issues/651&gt;\\n        release_this_conn = release_conn\\n    \\n        http_tunnel_required = connection_requires_http_tunnel(\\n            self.proxy, self.proxy_config, destination_scheme\\n        )\\n    \\n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\\n        # have to copy the headers dict so we can safely change it without those\\n        # changes being reflected in anyone else's copy.\\n        if not http_tunnel_required:\\n            headers = headers.copy()  # type: ignore[attr-defined]\\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\\n    \\n        # Must keep the exception bound to a separate variable or else Python 3\\n        # complains about UnboundLocalError.\\n        err = None\\n    \\n        # Keep track of whether we cleanly exited the except block. This\\n        # ensures we do proper cleanup in finally.\\n        clean_exit = False\\n    \\n        # Rewind body position, if needed. Record current position\\n        # for future rewinds in the event of a redirect/retry.\\n        body_pos = set_file_position(body, body_pos)\\n    \\n        try:\\n            # Request a connection from the queue.\\n            timeout_obj = self._get_timeout(timeout)\\n            conn = self._get_conn(timeout=pool_timeout)\\n    \\n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\\n    \\n            # Is this a closed/new connection that requires CONNECT tunnelling?\\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\\n                try:\\n                    self._prepare_proxy(conn)\\n                except (BaseSSLError, OSError, SocketTimeout) as e:\\n                    self._raise_timeout(\\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\\n                    )\\n                    raise\\n    \\n            # If we're going to release the connection in ``finally:``, then\\n            # the response doesn't need to know about the connection. Otherwise\\n            # it will also try to release it and we'll have a double-release\\n            # mess.\\n            response_conn = conn if not release_conn else None\\n    \\n            # Make the request on the HTTPConnection object\\n&gt;           response = self._make_request(\\n                conn,\\n                method,\\n                url,\\n                timeout=timeout_obj,\\n                body=body,\\n                headers=headers,\\n                chunked=chunked,\\n                retries=retries,\\n                response_conn=response_conn,\\n                preload_content=preload_content,\\n                decode_content=decode_content,\\n                **response_kw,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:789: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:495: in _make_request\\n    conn.request(\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:441: in request\\n    self.endheaders()\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:1278: in endheaders\\n    self._send_output(message_body, encode_chunked=encode_chunked)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:1038: in _send_output\\n    self.send(msg)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:976: in send\\n    self.connect()\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:279: in connect\\n    self.sock = self._new_conn()\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = &lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;\\n\\n    def _new_conn(self) -&gt; socket.socket:\\n        \\\"\\\"\\\"Establish a socket connection and set nodelay settings on it.\\n    \\n        :return: New socket connection.\\n        \\\"\\\"\\\"\\n        try:\\n            sock = connection.create_connection(\\n                (self._dns_host, self.port),\\n                self.timeout,\\n                source_address=self.source_address,\\n                socket_options=self.socket_options,\\n            )\\n        except socket.gaierror as e:\\n            raise NameResolutionError(self.host, self, e) from e\\n        except SocketTimeout as e:\\n            raise ConnectTimeoutError(\\n                self,\\n                f\\\"Connection to {self.host} timed out. (connect timeout={self.timeout})\\\",\\n            ) from e\\n    \\n        except OSError as e:\\n&gt;           raise NewConnectionError(\\n                self, f\\\"Failed to establish a new connection: {e}\\\"\\n            ) from e\\nE           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:214: NewConnectionError\\n\\nThe above exception was the direct cause of the following exception:\\n\\nself = &lt;requests.adapters.HTTPAdapter object at 0x0000022BD7BA4340&gt;\\nrequest = &lt;PreparedRequest [POST]&gt;, stream = False\\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\\ncert = None, proxies = OrderedDict()\\n\\n    def send(\\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\\n    ):\\n        \\\"\\\"\\\"Sends PreparedRequest object. Returns Response object.\\n    \\n        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.\\n        :param stream: (optional) Whether to stream the request content.\\n        :param timeout: (optional) How long to wait for the server to send\\n            data before giving up, as a float, or a :ref:`(connect timeout,\\n            read timeout) &lt;timeouts&gt;` tuple.\\n        :type timeout: float or tuple or urllib3 Timeout object\\n        :param verify: (optional) Either a boolean, in which case it controls whether\\n            we verify the server's TLS certificate, or a string, in which case it\\n            must be a path to a CA bundle to use\\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\\n        :param proxies: (optional) The proxies dictionary to apply to the request.\\n        :rtype: requests.Response\\n        \\\"\\\"\\\"\\n    \\n        try:\\n            conn = self.get_connection_with_tls_context(\\n                request, verify, proxies=proxies, cert=cert\\n            )\\n        except LocationValueError as e:\\n            raise InvalidURL(e, request=request)\\n    \\n        self.cert_verify(conn, request.url, verify, cert)\\n        url = self.request_url(request, proxies)\\n        self.add_headers(\\n            request,\\n            stream=stream,\\n            timeout=timeout,\\n            verify=verify,\\n            cert=cert,\\n            proxies=proxies,\\n        )\\n    \\n        chunked = not (request.body is None or \\\"Content-Length\\\" in request.headers)\\n    \\n        if isinstance(timeout, tuple):\\n            try:\\n                connect, read = timeout\\n                timeout = TimeoutSauce(connect=connect, read=read)\\n            except ValueError:\\n                raise ValueError(\\n                    f\\\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \\\"\\n                    f\\\"or a single float to set both timeouts to the same value.\\\"\\n                )\\n        elif isinstance(timeout, TimeoutSauce):\\n            pass\\n        else:\\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\\n    \\n        try:\\n&gt;           resp = conn.urlopen(\\n                method=request.method,\\n                url=url,\\n                body=request.body,\\n                headers=request.headers,\\n                redirect=False,\\n                assert_same_host=False,\\n                preload_content=False,\\n                decode_content=False,\\n                retries=self.max_retries,\\n                timeout=timeout,\\n                chunked=chunked,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py:667: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:843: in urlopen\\n    retries = retries.increment(\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\\nmethod = 'POST', url = '/login_safe', response = None\\nerror = NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。')\\n_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000022BD7BA5450&gt;\\n_stacktrace = &lt;traceback object at 0x0000022BD7DB9600&gt;\\n\\n    def increment(\\n        self,\\n        method: str | None = None,\\n        url: str | None = None,\\n        response: BaseHTTPResponse | None = None,\\n        error: Exception | None = None,\\n        _pool: ConnectionPool | None = None,\\n        _stacktrace: TracebackType | None = None,\\n    ) -&gt; Self:\\n        \\\"\\\"\\\"Return a new Retry object with incremented retry counters.\\n    \\n        :param response: A response object, or None, if the server did not\\n            return a response.\\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\\n        :param Exception error: An error encountered during the request, or\\n            None if the response was received successfully.\\n    \\n        :return: A new ``Retry`` object.\\n        \\\"\\\"\\\"\\n        if self.total is False and error:\\n            # Disabled, indicate to re-raise the error.\\n            raise reraise(type(error), error, _stacktrace)\\n    \\n        total = self.total\\n        if total is not None:\\n            total -= 1\\n    \\n        connect = self.connect\\n        read = self.read\\n        redirect = self.redirect\\n        status_count = self.status\\n        other = self.other\\n        cause = \\\"unknown\\\"\\n        status = None\\n        redirect_location = None\\n    \\n        if error and self._is_connection_error(error):\\n            # Connect retry?\\n            if connect is False:\\n                raise reraise(type(error), error, _stacktrace)\\n            elif connect is not None:\\n                connect -= 1\\n    \\n        elif error and self._is_read_error(error):\\n            # Read retry?\\n            if read is False or method is None or not self._is_method_retryable(method):\\n                raise reraise(type(error), error, _stacktrace)\\n            elif read is not None:\\n                read -= 1\\n    \\n        elif error:\\n            # Other retry?\\n            if other is not None:\\n                other -= 1\\n    \\n        elif response and response.get_redirect_location():\\n            # Redirect retry?\\n            if redirect is not None:\\n                redirect -= 1\\n            cause = \\\"too many redirects\\\"\\n            response_redirect_location = response.get_redirect_location()\\n            if response_redirect_location:\\n                redirect_location = response_redirect_location\\n            status = response.status\\n    \\n        else:\\n            # Incrementing because of a server error like a 500 in\\n            # status_forcelist and the given method is in the allowed_methods\\n            cause = ResponseError.GENERIC_ERROR\\n            if response and response.status:\\n                if status_count is not None:\\n                    status_count -= 1\\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\\n                status = response.status\\n    \\n        history = self.history + (\\n            RequestHistory(method, url, error, status, redirect_location),\\n        )\\n    \\n        new_retry = self.new(\\n            total=total,\\n            connect=connect,\\n            read=read,\\n            redirect=redirect,\\n            status=status_count,\\n            other=other,\\n            history=history,\\n        )\\n    \\n        if new_retry.is_exhausted():\\n            reason = error or ResponseError(cause)\\n&gt;           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\retry.py:519: MaxRetryError\\n\\nDuring handling of the above exception, another exception occurred:\\n\\nself = &lt;apirun.core.ApiTestRunner.TestRunner object at 0x0000022BD7731690&gt;\\ncaseinfo = {'_case_name': '加密接口-错误的用户名和密码', 'context': {'desc': '错误的用户名和密码', 'password': '1234567', 'username': 'hami'}, 'desc': '加密接口', 'featureName': '登录模块', ...}\\n\\n    def test_case_execute(self, caseinfo):\\n        print(\\\"当前的测试数据：\\\", caseinfo)\\n        # TODO 2-1: 动态生成一下当前的测试用例标题\\n        # allure.dynamic.title(caseinfo[\\\"_case_name\\\"])\\n    \\n        # TODO 2-1 : 调用动态生成标题的方法\\n        dynamicTitle(caseinfo)\\n    \\n        # TODO 2-2: 基于我们步骤一步步进行执行\\n        try:\\n            # 实例化关键字对象\\n            keywords = KeyWords()\\n    \\n            # 获取当前用例变量，方便后续的渲染\\n            local_context = caseinfo.get(\\\"context\\\",{})\\n            context = copy.deepcopy(g_context().show_dict())\\n            context.update(local_context)\\n    \\n            steps = caseinfo.get(\\\"steps\\\", None)\\n            for step in steps:\\n                #  提示信息\\n                step_name = list(step.keys())[0]\\n                step_value = list(step.values())[0]\\n                print(f\\\"开始执行步骤：{step_name} - {step_value}\\\")\\n    \\n                # TODO : 每一个步骤进行变量的渲染\\n                context = copy.deepcopy(g_context().show_dict())\\n                context.update(local_context)\\n                step_value = eval(refresh(step_value, context))\\n    \\n                # 基于每个步骤的关键字，找到对应的方法，然后把参数给它\\n                #  通过【反射】的方式去找到对应的方法\\n                with allure.step(step_name):\\n                    key = step_value[\\\"关键字\\\"]  # 具体的方法名, 在 keywords 里面找到这个方法\\n                    try:\\n                        key_func = keywords.__getattribute__(key)  # 从keywords获取到对应方法\\n                    except AttributeError as e:\\n                        print(\\\"没有这个关键字方法\\\", e)\\n&gt;                   key_func(**step_value)  # 调用方法\\n\\ncore\\\\ApiTestRunner.py:62: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nextend\\\\keywords.py:79: in request_post_form_urlencoded\\n    response = requests.post(**request_data)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py:115: in post\\n    return request(\\\"post\\\", url, data=data, json=json, **kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py:59: in request\\n    return session.request(method=method, url=url, **kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py:589: in request\\n    resp = self.send(prep, **send_kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py:703: in send\\n    r = adapter.send(request, **kwargs)\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = &lt;requests.adapters.HTTPAdapter object at 0x0000022BD7BA4340&gt;\\nrequest = &lt;PreparedRequest [POST]&gt;, stream = False\\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\\ncert = None, proxies = OrderedDict()\\n\\n    def send(\\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\\n    ):\\n        \\\"\\\"\\\"Sends PreparedRequest object. Returns Response object.\\n    \\n        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.\\n        :param stream: (optional) Whether to stream the request content.\\n        :param timeout: (optional) How long to wait for the server to send\\n            data before giving up, as a float, or a :ref:`(connect timeout,\\n            read timeout) &lt;timeouts&gt;` tuple.\\n        :type timeout: float or tuple or urllib3 Timeout object\\n        :param verify: (optional) Either a boolean, in which case it controls whether\\n            we verify the server's TLS certificate, or a string, in which case it\\n            must be a path to a CA bundle to use\\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\\n        :param proxies: (optional) The proxies dictionary to apply to the request.\\n        :rtype: requests.Response\\n        \\\"\\\"\\\"\\n    \\n        try:\\n            conn = self.get_connection_with_tls_context(\\n                request, verify, proxies=proxies, cert=cert\\n            )\\n        except LocationValueError as e:\\n            raise InvalidURL(e, request=request)\\n    \\n        self.cert_verify(conn, request.url, verify, cert)\\n        url = self.request_url(request, proxies)\\n        self.add_headers(\\n            request,\\n            stream=stream,\\n            timeout=timeout,\\n            verify=verify,\\n            cert=cert,\\n            proxies=proxies,\\n        )\\n    \\n        chunked = not (request.body is None or \\\"Content-Length\\\" in request.headers)\\n    \\n        if isinstance(timeout, tuple):\\n            try:\\n                connect, read = timeout\\n                timeout = TimeoutSauce(connect=connect, read=read)\\n            except ValueError:\\n                raise ValueError(\\n                    f\\\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \\\"\\n                    f\\\"or a single float to set both timeouts to the same value.\\\"\\n                )\\n        elif isinstance(timeout, TimeoutSauce):\\n            pass\\n        else:\\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\\n    \\n        try:\\n            resp = conn.urlopen(\\n                method=request.method,\\n                url=url,\\n                body=request.body,\\n                headers=request.headers,\\n                redirect=False,\\n                assert_same_host=False,\\n                preload_content=False,\\n                decode_content=False,\\n                retries=self.max_retries,\\n                timeout=timeout,\\n                chunked=chunked,\\n            )\\n    \\n        except (ProtocolError, OSError) as err:\\n            raise ConnectionError(err, request=request)\\n    \\n        except MaxRetryError as e:\\n            if isinstance(e.reason, ConnectTimeoutError):\\n                # TODO: Remove this in 3.0.0: see #2811\\n                if not isinstance(e.reason, NewConnectionError):\\n                    raise ConnectTimeout(e, request=request)\\n    \\n            if isinstance(e.reason, ResponseError):\\n                raise RetryError(e, request=request)\\n    \\n            if isinstance(e.reason, _ProxyError):\\n                raise ProxyError(e, request=request)\\n    \\n            if isinstance(e.reason, _SSLError):\\n                # This branch is for urllib3 v1.22 and later.\\n                raise SSLError(e, request=request)\\n    \\n&gt;           raise ConnectionError(e, request=request)\\nE           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py:700: ConnectionError\",\"steps\":[{\"name\":\"进行数据加密 - 用户名\",\"time\":{\"start\":1728414503605,\"stop\":1728414503605,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：对数据进行AES加密处理\",\"time\":{\"start\":1728414503605,\"stop\":1728414503605,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'encrypt_aes'\"},{\"name\":\"data\",\"value\":\"'hami'\"},{\"name\":\"VARNAME\",\"value\":\"'aes_username'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"进行数据加密 - 密码\",\"time\":{\"start\":1728414503607,\"stop\":1728414503607,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：对数据进行AES加密处理\",\"time\":{\"start\":1728414503607,\"stop\":1728414503607,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'encrypt_aes'\"},{\"name\":\"data\",\"value\":\"'1234567'\"},{\"name\":\"VARNAME\",\"value\":\"'aes_password'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414503608,\"stop\":1728414505638,\"duration\":2030},\"status\":\"broken\",\"statusMessage\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\",\"statusTrace\":\"  File \\\"G:\\\\华测\\\\接口自动化\\\\扩展：自动化框架转成核心执行器\\\\api-engine\\\\apirun\\\\core\\\\ApiTestRunner.py\\\", line 62, in test_case_execute\\n    key_func(**step_value)  # 调用方法\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\allure_commons\\\\_allure.py\\\", line 192, in impl\\n    return func(*a, **kw)\\n  File \\\"G:\\\\华测\\\\接口自动化\\\\扩展：自动化框架转成核心执行器\\\\api-engine\\\\apirun\\\\extend\\\\keywords.py\\\", line 79, in request_post_form_urlencoded\\n    response = requests.post(**request_data)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py\\\", line 115, in post\\n    return request(\\\"post\\\", url, data=data, json=json, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py\\\", line 59, in request\\n    return session.request(method=method, url=url, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py\\\", line 589, in request\\n    resp = self.send(prep, **send_kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py\\\", line 703, in send\\n    r = adapter.send(request, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py\\\", line 700, in send\\n    raise ConnectionError(e, request=request)\\n\",\"steps\":[{\"name\":\"参数数据：发送Post请求-form_urlencoded\",\"time\":{\"start\":1728414503608,\"stop\":1728414505637,\"duration\":2029},\"status\":\"broken\",\"statusMessage\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\",\"statusTrace\":\"  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\allure_commons\\\\_allure.py\\\", line 192, in impl\\n    return func(*a, **kw)\\n  File \\\"G:\\\\华测\\\\接口自动化\\\\扩展：自动化框架转成核心执行器\\\\api-engine\\\\apirun\\\\extend\\\\keywords.py\\\", line 79, in request_post_form_urlencoded\\n    response = requests.post(**request_data)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py\\\", line 115, in post\\n    return request(\\\"post\\\", url, data=data, json=json, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py\\\", line 59, in request\\n    return session.request(method=method, url=url, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py\\\", line 589, in request\\n    resp = self.send(prep, **send_kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py\\\", line 703, in send\\n    r = adapter.send(request, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py\\\", line 700, in send\\n    raise ConnectionError(e, request=request)\\n\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_form_urlencoded'\"},{\"name\":\"URL\",\"value\":\"'http://127.0.0.1:8080/login_safe'\"},{\"name\":\"DATA\",\"value\":\"{'password': 'Sd7dHpyVfDorD9Pws7ogPg==', 'username': 'JK1ZBV2UdsDlY69wOMgd2w=='}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":true,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"7d469a7a70bd27fc\",\"name\":\"log\",\"source\":\"7d469a7a70bd27fc.txt\",\"type\":\"text/plain\",\"size\":106},{\"uid\":\"284a29bd61803f63\",\"name\":\"stdout\",\"source\":\"284a29bd61803f63.txt\",\"type\":\"text/plain\",\"size\":2270}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":true,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"加密项目\"},{\"name\":\"feature\",\"value\":\"登录模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[{\"name\":\"Test defects\",\"matchedStatuses\":[],\"flaky\":false}],\"tags\":[]},\"source\":\"56991eb67b28e2e1.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/56d77263f9f0bc36.json": "{\"uid\":\"56d77263f9f0bc36\",\"name\":\"用户注册用例-生成用户名能生成成功\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"fc86752b3d21f6f6c332871a921533f1\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213},\"description\":\"注册模块备注\",\"descriptionHtml\":\"&lt;p&gt;注册模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"注册模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"生成注册的用户名\",\"time\":{\"start\":1728414495712,\"stop\":1728414495713,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：对数据进行AES加密处理\",\"time\":{\"start\":1728414495713,\"stop\":1728414495713,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'generate_name'\"},{\"name\":\"VARNAME\",\"value\":\"'username'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414495714,\"stop\":1728414495920,\"duration\":206},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-form_urlencoded\",\"time\":{\"start\":1728414495714,\"stop\":1728414495920,\"duration\":206},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_form_urlencoded'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/user/reg'}\"},{\"name\":\"DATA\",\"value\":\"{'accounts': 'hami1219', 'pwd': '123456', 'type': 'username'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414495921,\"stop\":1728414495922,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414495921,\"stop\":1728414495922,\"duration\":1},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414495923,\"stop\":1728414495923,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414495923,\"stop\":1728414495923,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'注册成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'注册成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"3344ff42ea1d7d49\",\"name\":\"log\",\"source\":\"3344ff42ea1d7d49.txt\",\"type\":\"text/plain\",\"size\":6180},{\"uid\":\"41355006111046a2\",\"name\":\"stdout\",\"source\":\"41355006111046a2.txt\",\"type\":\"text/plain\",\"size\":1867}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":8,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"用户模块\"},{\"name\":\"feature\",\"value\":\"注册模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"56d77263f9f0bc36.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/5ba6659e6546b46.json": "{\"uid\":\"5ba6659e6546b46\",\"name\":\"查询地址列表\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"c39b2570863c7595d3e36f580e9b123d\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474},\"description\":\"地址列表模块备注\",\"descriptionHtml\":\"&lt;p&gt;地址列表模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"地址列表模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414497176,\"stop\":1728414498559,\"duration\":1383},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Get请求\",\"time\":{\"start\":1728414497176,\"stop\":1728414498559,\"duration\":1383},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_get'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/useraddress/index', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414498560,\"stop\":1728414498603,\"duration\":43},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414498560,\"stop\":1728414498603,\"duration\":43},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414498604,\"stop\":1728414498604,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414498604,\"stop\":1728414498604,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'success'\"},{\"name\":\"EXPECTED\",\"value\":\"'success'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-add_id\",\"time\":{\"start\":1728414498605,\"stop\":1728414498649,\"duration\":44},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414498605,\"stop\":1728414498649,\"duration\":44},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..id'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'add_id'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"e642b66d783664d6\",\"name\":\"log\",\"source\":\"e642b66d783664d6.txt\",\"type\":\"text/plain\",\"size\":318},{\"uid\":\"6cf441aad8786a64\",\"name\":\"stdout\",\"source\":\"6cf441aad8786a64.txt\",\"type\":\"text/plain\",\"size\":2239}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":8,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"地址模块\"},{\"name\":\"feature\",\"value\":\"地址模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"5ba6659e6546b46.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/5e75ff36be7819ef.json": "{\"uid\":\"5e75ff36be7819ef\",\"name\":\"删除购物车成功\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"04a30b87a64481eda6893f249e7740a8\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133},\"description\":\"查看购物车模块备注\",\"descriptionHtml\":\"&lt;p&gt;查看购物车模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"查看购物车模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414497039,\"stop\":1728414497168,\"duration\":129},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-form_urlencoded\",\"time\":{\"start\":1728414497039,\"stop\":1728414497168,\"duration\":129},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_form_urlencoded'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/cart/delete', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"},{\"name\":\"DATA\",\"value\":\"{'id': '28839'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414497169,\"stop\":1728414497169,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414497169,\"stop\":1728414497169,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414497170,\"stop\":1728414497170,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414497170,\"stop\":1728414497170,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'删除成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'删除成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"4d3ab828e4e5c305\",\"name\":\"log\",\"source\":\"4d3ab828e4e5c305.txt\",\"type\":\"text/plain\",\"size\":313},{\"uid\":\"813c08cf3e07812c\",\"name\":\"stdout\",\"source\":\"813c08cf3e07812c.txt\",\"type\":\"text/plain\",\"size\":1661}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"订单模块\"},{\"name\":\"feature\",\"value\":\"购物车模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"5e75ff36be7819ef.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/6d91d2c3d36393e.json": "{\"uid\":\"6d91d2c3d36393e\",\"name\":\"T2-登录用例-正确的用户名和密码\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"ec001c164e4bc0952ba3cad52744b597\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176},\"description\":\"登录模块备注\",\"descriptionHtml\":\"&lt;p&gt;登录模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"登录模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414496000,\"stop\":1728414496154,\"duration\":154},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-form_urlencoded\",\"time\":{\"start\":1728414496000,\"stop\":1728414496154,\"duration\":154},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_form_urlencoded'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': '/api/user/login', 'application': 'app'}\"},{\"name\":\"DATA\",\"value\":\"{'accounts': 'hami', 'pwd': '123456', 'type': 'username'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414496155,\"stop\":1728414496156,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414496156,\"stop\":1728414496156,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414496158,\"stop\":1728414496158,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414496158,\"stop\":1728414496158,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'登录成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'登录成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-全量断言-等于\",\"time\":{\"start\":1728414496159,\"stop\":1728414496159,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：全量断言-对比两个Json的差异\",\"time\":{\"start\":1728414496159,\"stop\":1728414496159,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_json_DeepDiff'\"},{\"name\":\"json1\",\"value\":\"{'name': 'hami', 'age': 18}\"},{\"name\":\"json2\",\"value\":\"{'name': 'hami', 'age': 18}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-全量断言-过滤字段\",\"time\":{\"start\":1728414496160,\"stop\":1728414496161,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：全量断言-对比两个Json的差异\",\"time\":{\"start\":1728414496160,\"stop\":1728414496161,\"duration\":1},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_json_DeepDiff'\"},{\"name\":\"json1\",\"value\":\"{'name': 'hami', 'age': 18, 'city': '长沙'}\"},{\"name\":\"json2\",\"value\":\"{'name': 'hami', 'age': 18}\"},{\"name\":\"过滤字段\",\"value\":\"{'city': None}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-全量断言-不等于\",\"time\":{\"start\":1728414496162,\"stop\":1728414496175,\"duration\":13},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：全量断言-对比两个Json的差异\",\"time\":{\"start\":1728414496162,\"stop\":1728414496175,\"duration\":13},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_json_DeepDiff'\"},{\"name\":\"json1\",\"value\":\"[1, 2, 3]\"},{\"name\":\"json2\",\"value\":\"[1, 3, 2]\"},{\"name\":\"忽略顺序\",\"value\":\"True\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"ab58330f17ac0915\",\"name\":\"log\",\"source\":\"ab58330f17ac0915.txt\",\"type\":\"text/plain\",\"size\":276},{\"uid\":\"b5ef652f4852e771\",\"name\":\"stdout\",\"source\":\"b5ef652f4852e771.txt\",\"type\":\"text/plain\",\"size\":2761}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":12,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"用户模块\"},{\"name\":\"feature\",\"value\":\"登录模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"6d91d2c3d36393e.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/79652414956fd36.json": "{\"uid\":\"79652414956fd36\",\"name\":\"加密接口-正确的用户名和密码\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"d29956a434dd772e90f0fdab49df661d\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"description\":\"登录模块备注\",\"descriptionHtml\":\"&lt;p&gt;登录模块备注&lt;/p&gt;\\n\",\"status\":\"broken\",\"statusMessage\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\",\"statusTrace\":\"self = &lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;\\n\\n    def _new_conn(self) -&gt; socket.socket:\\n        \\\"\\\"\\\"Establish a socket connection and set nodelay settings on it.\\n    \\n        :return: New socket connection.\\n        \\\"\\\"\\\"\\n        try:\\n&gt;           sock = connection.create_connection(\\n                (self._dns_host, self.port),\\n                self.timeout,\\n                source_address=self.source_address,\\n                socket_options=self.socket_options,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:199: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\connection.py:85: in create_connection\\n    raise err\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\naddress = ('127.0.0.1', 8080), timeout = None, source_address = None\\nsocket_options = [(6, 1, 1)]\\n\\n    def create_connection(\\n        address: tuple[str, int],\\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\\n        source_address: tuple[str, int] | None = None,\\n        socket_options: _TYPE_SOCKET_OPTIONS | None = None,\\n    ) -&gt; socket.socket:\\n        \\\"\\\"\\\"Connect to *address* and return the socket object.\\n    \\n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\\n        port)``) and return the socket object.  Passing the optional\\n        *timeout* parameter will set the timeout on the socket instance\\n        before attempting to connect.  If no *timeout* is supplied, the\\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\\n        is used.  If *source_address* is set it must be a tuple of (host, port)\\n        for the socket to bind as a source address before making the connection.\\n        An host of '' or port 0 tells the OS to use the default.\\n        \\\"\\\"\\\"\\n    \\n        host, port = address\\n        if host.startswith(\\\"[\\\"):\\n            host = host.strip(\\\"[]\\\")\\n        err = None\\n    \\n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\\n        # The original create_connection function always returns all records.\\n        family = allowed_gai_family()\\n    \\n        try:\\n            host.encode(\\\"idna\\\")\\n        except UnicodeError:\\n            raise LocationParseError(f\\\"'{host}', label empty or too long\\\") from None\\n    \\n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\\n            af, socktype, proto, canonname, sa = res\\n            sock = None\\n            try:\\n                sock = socket.socket(af, socktype, proto)\\n    \\n                # If provided, set socket level options before connecting.\\n                _set_socket_options(sock, socket_options)\\n    \\n                if timeout is not _DEFAULT_TIMEOUT:\\n                    sock.settimeout(timeout)\\n                if source_address:\\n                    sock.bind(source_address)\\n&gt;               sock.connect(sa)\\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\connection.py:73: ConnectionRefusedError\\n\\nThe above exception was the direct cause of the following exception:\\n\\nself = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000022BD78A0520&gt;\\nmethod = 'POST', url = '/login_safe'\\nbody = 'password=XbXHJrNLwoTVcyfqM9eTgQ%3D%3D&username=mdSm0RmB%2BxAKrTah3DG31A%3D%3D'\\nheaders = {'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '77', 'Content-Type': 'application/x-www-form-urlencoded'}\\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\\nredirect = False, assert_same_host = False\\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\\ndecode_content = False, response_kw = {}\\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/login_safe', query=None, fragment=None)\\ndestination_scheme = None, conn = None, release_this_conn = True\\nhttp_tunnel_required = False, err = None, clean_exit = False\\n\\n    def urlopen(  # type: ignore[override]\\n        self,\\n        method: str,\\n        url: str,\\n        body: _TYPE_BODY | None = None,\\n        headers: typing.Mapping[str, str] | None = None,\\n        retries: Retry | bool | int | None = None,\\n        redirect: bool = True,\\n        assert_same_host: bool = True,\\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\\n        pool_timeout: int | None = None,\\n        release_conn: bool | None = None,\\n        chunked: bool = False,\\n        body_pos: _TYPE_BODY_POSITION | None = None,\\n        preload_content: bool = True,\\n        decode_content: bool = True,\\n        **response_kw: typing.Any,\\n    ) -&gt; BaseHTTPResponse:\\n        \\\"\\\"\\\"\\n        Get a connection from the pool and perform an HTTP request. This is the\\n        lowest level call for making a request, so you'll need to specify all\\n        the raw details.\\n    \\n        .. note::\\n    \\n           More commonly, it's appropriate to use a convenience method\\n           such as :meth:`request`.\\n    \\n        .. note::\\n    \\n           `release_conn` will only behave as expected if\\n           `preload_content=False` because we want to make\\n           `preload_content=False` the default behaviour someday soon without\\n           breaking backwards compatibility.\\n    \\n        :param method:\\n            HTTP request method (such as GET, POST, PUT, etc.)\\n    \\n        :param url:\\n            The URL to perform the request on.\\n    \\n        :param body:\\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\\n    \\n        :param headers:\\n            Dictionary of custom headers to send, such as User-Agent,\\n            If-None-Match, etc. If None, pool headers are used. If provided,\\n            these headers completely replace any pool-specific headers.\\n    \\n        :param retries:\\n            Configure the number of retries to allow before raising a\\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\\n    \\n            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a\\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\\n            over different types of retries.\\n            Pass an integer number to retry connection errors that many times,\\n            but no other types of errors. Pass zero to never retry.\\n    \\n            If ``False``, then retries are disabled and any exception is raised\\n            immediately. Also, instead of raising a MaxRetryError on redirects,\\n            the redirect response will be returned.\\n    \\n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\\n    \\n        :param redirect:\\n            If True, automatically handle redirects (status codes 301, 302,\\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\\n            will disable redirect, too.\\n    \\n        :param assert_same_host:\\n            If ``True``, will make sure that the host of the pool requests is\\n            consistent else will raise HostChangedError. When ``False``, you can\\n            use the pool on an HTTP proxy and request foreign hosts.\\n    \\n        :param timeout:\\n            If specified, overrides the default timeout for this one\\n            request. It may be a float (in seconds) or an instance of\\n            :class:`urllib3.util.Timeout`.\\n    \\n        :param pool_timeout:\\n            If set and the pool is set to block=True, then this method will\\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\\n            connection is available within the time period.\\n    \\n        :param bool preload_content:\\n            If True, the response's body will be preloaded into memory.\\n    \\n        :param bool decode_content:\\n            If True, will attempt to decode the body based on the\\n            'content-encoding' header.\\n    \\n        :param release_conn:\\n            If False, then the urlopen call will not release the connection\\n            back into the pool once a response is received (but will release if\\n            you read the entire contents of the response such as when\\n            `preload_content=True`). This is useful if you're not preloading\\n            the response's content immediately. You will need to call\\n            ``r.release_conn()`` on the response ``r`` to return the connection\\n            back into the pool. If None, it takes the value of ``preload_content``\\n            which defaults to ``True``.\\n    \\n        :param bool chunked:\\n            If True, urllib3 will send the body using chunked transfer\\n            encoding. Otherwise, urllib3 will send the body using the standard\\n            content-length form. Defaults to False.\\n    \\n        :param int body_pos:\\n            Position to seek to in file-like body in the event of a retry or\\n            redirect. Typically this won't need to be set because urllib3 will\\n            auto-populate the value when needed.\\n        \\\"\\\"\\\"\\n        parsed_url = parse_url(url)\\n        destination_scheme = parsed_url.scheme\\n    \\n        if headers is None:\\n            headers = self.headers\\n    \\n        if not isinstance(retries, Retry):\\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\\n    \\n        if release_conn is None:\\n            release_conn = preload_content\\n    \\n        # Check host\\n        if assert_same_host and not self.is_same_host(url):\\n            raise HostChangedError(self, url, retries)\\n    \\n        # Ensure that the URL we're connecting to is properly encoded\\n        if url.startswith(\\\"/\\\"):\\n            url = to_str(_encode_target(url))\\n        else:\\n            url = to_str(parsed_url.url)\\n    \\n        conn = None\\n    \\n        # Track whether `conn` needs to be released before\\n        # returning/raising/recursing. Update this variable if necessary, and\\n        # leave `release_conn` constant throughout the function. That way, if\\n        # the function recurses, the original value of `release_conn` will be\\n        # passed down into the recursive call, and its value will be respected.\\n        #\\n        # See issue #651 [1] for details.\\n        #\\n        # [1] &lt;https://github.com/urllib3/urllib3/issues/651&gt;\\n        release_this_conn = release_conn\\n    \\n        http_tunnel_required = connection_requires_http_tunnel(\\n            self.proxy, self.proxy_config, destination_scheme\\n        )\\n    \\n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\\n        # have to copy the headers dict so we can safely change it without those\\n        # changes being reflected in anyone else's copy.\\n        if not http_tunnel_required:\\n            headers = headers.copy()  # type: ignore[attr-defined]\\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\\n    \\n        # Must keep the exception bound to a separate variable or else Python 3\\n        # complains about UnboundLocalError.\\n        err = None\\n    \\n        # Keep track of whether we cleanly exited the except block. This\\n        # ensures we do proper cleanup in finally.\\n        clean_exit = False\\n    \\n        # Rewind body position, if needed. Record current position\\n        # for future rewinds in the event of a redirect/retry.\\n        body_pos = set_file_position(body, body_pos)\\n    \\n        try:\\n            # Request a connection from the queue.\\n            timeout_obj = self._get_timeout(timeout)\\n            conn = self._get_conn(timeout=pool_timeout)\\n    \\n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\\n    \\n            # Is this a closed/new connection that requires CONNECT tunnelling?\\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\\n                try:\\n                    self._prepare_proxy(conn)\\n                except (BaseSSLError, OSError, SocketTimeout) as e:\\n                    self._raise_timeout(\\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\\n                    )\\n                    raise\\n    \\n            # If we're going to release the connection in ``finally:``, then\\n            # the response doesn't need to know about the connection. Otherwise\\n            # it will also try to release it and we'll have a double-release\\n            # mess.\\n            response_conn = conn if not release_conn else None\\n    \\n            # Make the request on the HTTPConnection object\\n&gt;           response = self._make_request(\\n                conn,\\n                method,\\n                url,\\n                timeout=timeout_obj,\\n                body=body,\\n                headers=headers,\\n                chunked=chunked,\\n                retries=retries,\\n                response_conn=response_conn,\\n                preload_content=preload_content,\\n                decode_content=decode_content,\\n                **response_kw,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:789: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:495: in _make_request\\n    conn.request(\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:441: in request\\n    self.endheaders()\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:1278: in endheaders\\n    self._send_output(message_body, encode_chunked=encode_chunked)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:1038: in _send_output\\n    self.send(msg)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:976: in send\\n    self.connect()\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:279: in connect\\n    self.sock = self._new_conn()\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = &lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;\\n\\n    def _new_conn(self) -&gt; socket.socket:\\n        \\\"\\\"\\\"Establish a socket connection and set nodelay settings on it.\\n    \\n        :return: New socket connection.\\n        \\\"\\\"\\\"\\n        try:\\n            sock = connection.create_connection(\\n                (self._dns_host, self.port),\\n                self.timeout,\\n                source_address=self.source_address,\\n                socket_options=self.socket_options,\\n            )\\n        except socket.gaierror as e:\\n            raise NameResolutionError(self.host, self, e) from e\\n        except SocketTimeout as e:\\n            raise ConnectTimeoutError(\\n                self,\\n                f\\\"Connection to {self.host} timed out. (connect timeout={self.timeout})\\\",\\n            ) from e\\n    \\n        except OSError as e:\\n&gt;           raise NewConnectionError(\\n                self, f\\\"Failed to establish a new connection: {e}\\\"\\n            ) from e\\nE           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:214: NewConnectionError\\n\\nThe above exception was the direct cause of the following exception:\\n\\nself = &lt;requests.adapters.HTTPAdapter object at 0x0000022BD78A2C50&gt;\\nrequest = &lt;PreparedRequest [POST]&gt;, stream = False\\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\\ncert = None, proxies = OrderedDict()\\n\\n    def send(\\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\\n    ):\\n        \\\"\\\"\\\"Sends PreparedRequest object. Returns Response object.\\n    \\n        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.\\n        :param stream: (optional) Whether to stream the request content.\\n        :param timeout: (optional) How long to wait for the server to send\\n            data before giving up, as a float, or a :ref:`(connect timeout,\\n            read timeout) &lt;timeouts&gt;` tuple.\\n        :type timeout: float or tuple or urllib3 Timeout object\\n        :param verify: (optional) Either a boolean, in which case it controls whether\\n            we verify the server's TLS certificate, or a string, in which case it\\n            must be a path to a CA bundle to use\\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\\n        :param proxies: (optional) The proxies dictionary to apply to the request.\\n        :rtype: requests.Response\\n        \\\"\\\"\\\"\\n    \\n        try:\\n            conn = self.get_connection_with_tls_context(\\n                request, verify, proxies=proxies, cert=cert\\n            )\\n        except LocationValueError as e:\\n            raise InvalidURL(e, request=request)\\n    \\n        self.cert_verify(conn, request.url, verify, cert)\\n        url = self.request_url(request, proxies)\\n        self.add_headers(\\n            request,\\n            stream=stream,\\n            timeout=timeout,\\n            verify=verify,\\n            cert=cert,\\n            proxies=proxies,\\n        )\\n    \\n        chunked = not (request.body is None or \\\"Content-Length\\\" in request.headers)\\n    \\n        if isinstance(timeout, tuple):\\n            try:\\n                connect, read = timeout\\n                timeout = TimeoutSauce(connect=connect, read=read)\\n            except ValueError:\\n                raise ValueError(\\n                    f\\\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \\\"\\n                    f\\\"or a single float to set both timeouts to the same value.\\\"\\n                )\\n        elif isinstance(timeout, TimeoutSauce):\\n            pass\\n        else:\\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\\n    \\n        try:\\n&gt;           resp = conn.urlopen(\\n                method=request.method,\\n                url=url,\\n                body=request.body,\\n                headers=request.headers,\\n                redirect=False,\\n                assert_same_host=False,\\n                preload_content=False,\\n                decode_content=False,\\n                retries=self.max_retries,\\n                timeout=timeout,\\n                chunked=chunked,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py:667: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:843: in urlopen\\n    retries = retries.increment(\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\\nmethod = 'POST', url = '/login_safe', response = None\\nerror = NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。')\\n_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000022BD78A0520&gt;\\n_stacktrace = &lt;traceback object at 0x0000022BD77833C0&gt;\\n\\n    def increment(\\n        self,\\n        method: str | None = None,\\n        url: str | None = None,\\n        response: BaseHTTPResponse | None = None,\\n        error: Exception | None = None,\\n        _pool: ConnectionPool | None = None,\\n        _stacktrace: TracebackType | None = None,\\n    ) -&gt; Self:\\n        \\\"\\\"\\\"Return a new Retry object with incremented retry counters.\\n    \\n        :param response: A response object, or None, if the server did not\\n            return a response.\\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\\n        :param Exception error: An error encountered during the request, or\\n            None if the response was received successfully.\\n    \\n        :return: A new ``Retry`` object.\\n        \\\"\\\"\\\"\\n        if self.total is False and error:\\n            # Disabled, indicate to re-raise the error.\\n            raise reraise(type(error), error, _stacktrace)\\n    \\n        total = self.total\\n        if total is not None:\\n            total -= 1\\n    \\n        connect = self.connect\\n        read = self.read\\n        redirect = self.redirect\\n        status_count = self.status\\n        other = self.other\\n        cause = \\\"unknown\\\"\\n        status = None\\n        redirect_location = None\\n    \\n        if error and self._is_connection_error(error):\\n            # Connect retry?\\n            if connect is False:\\n                raise reraise(type(error), error, _stacktrace)\\n            elif connect is not None:\\n                connect -= 1\\n    \\n        elif error and self._is_read_error(error):\\n            # Read retry?\\n            if read is False or method is None or not self._is_method_retryable(method):\\n                raise reraise(type(error), error, _stacktrace)\\n            elif read is not None:\\n                read -= 1\\n    \\n        elif error:\\n            # Other retry?\\n            if other is not None:\\n                other -= 1\\n    \\n        elif response and response.get_redirect_location():\\n            # Redirect retry?\\n            if redirect is not None:\\n                redirect -= 1\\n            cause = \\\"too many redirects\\\"\\n            response_redirect_location = response.get_redirect_location()\\n            if response_redirect_location:\\n                redirect_location = response_redirect_location\\n            status = response.status\\n    \\n        else:\\n            # Incrementing because of a server error like a 500 in\\n            # status_forcelist and the given method is in the allowed_methods\\n            cause = ResponseError.GENERIC_ERROR\\n            if response and response.status:\\n                if status_count is not None:\\n                    status_count -= 1\\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\\n                status = response.status\\n    \\n        history = self.history + (\\n            RequestHistory(method, url, error, status, redirect_location),\\n        )\\n    \\n        new_retry = self.new(\\n            total=total,\\n            connect=connect,\\n            read=read,\\n            redirect=redirect,\\n            status=status_count,\\n            other=other,\\n            history=history,\\n        )\\n    \\n        if new_retry.is_exhausted():\\n            reason = error or ResponseError(cause)\\n&gt;           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\retry.py:519: MaxRetryError\\n\\nDuring handling of the above exception, another exception occurred:\\n\\nself = &lt;apirun.core.ApiTestRunner.TestRunner object at 0x0000022BD77321D0&gt;\\ncaseinfo = {'_case_name': '加密接口-正确的用户名和密码', 'context': {'desc': '正确的用户名和密码', 'password': '123456', 'username': 'tony'}, 'desc': '加密接口', 'featureName': '登录模块', ...}\\n\\n    def test_case_execute(self, caseinfo):\\n        print(\\\"当前的测试数据：\\\", caseinfo)\\n        # TODO 2-1: 动态生成一下当前的测试用例标题\\n        # allure.dynamic.title(caseinfo[\\\"_case_name\\\"])\\n    \\n        # TODO 2-1 : 调用动态生成标题的方法\\n        dynamicTitle(caseinfo)\\n    \\n        # TODO 2-2: 基于我们步骤一步步进行执行\\n        try:\\n            # 实例化关键字对象\\n            keywords = KeyWords()\\n    \\n            # 获取当前用例变量，方便后续的渲染\\n            local_context = caseinfo.get(\\\"context\\\",{})\\n            context = copy.deepcopy(g_context().show_dict())\\n            context.update(local_context)\\n    \\n            steps = caseinfo.get(\\\"steps\\\", None)\\n            for step in steps:\\n                #  提示信息\\n                step_name = list(step.keys())[0]\\n                step_value = list(step.values())[0]\\n                print(f\\\"开始执行步骤：{step_name} - {step_value}\\\")\\n    \\n                # TODO : 每一个步骤进行变量的渲染\\n                context = copy.deepcopy(g_context().show_dict())\\n                context.update(local_context)\\n                step_value = eval(refresh(step_value, context))\\n    \\n                # 基于每个步骤的关键字，找到对应的方法，然后把参数给它\\n                #  通过【反射】的方式去找到对应的方法\\n                with allure.step(step_name):\\n                    key = step_value[\\\"关键字\\\"]  # 具体的方法名, 在 keywords 里面找到这个方法\\n                    try:\\n                        key_func = keywords.__getattribute__(key)  # 从keywords获取到对应方法\\n                    except AttributeError as e:\\n                        print(\\\"没有这个关键字方法\\\", e)\\n&gt;                   key_func(**step_value)  # 调用方法\\n\\ncore\\\\ApiTestRunner.py:62: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nextend\\\\keywords.py:79: in request_post_form_urlencoded\\n    response = requests.post(**request_data)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py:115: in post\\n    return request(\\\"post\\\", url, data=data, json=json, **kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py:59: in request\\n    return session.request(method=method, url=url, **kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py:589: in request\\n    resp = self.send(prep, **send_kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py:703: in send\\n    r = adapter.send(request, **kwargs)\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = &lt;requests.adapters.HTTPAdapter object at 0x0000022BD78A2C50&gt;\\nrequest = &lt;PreparedRequest [POST]&gt;, stream = False\\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\\ncert = None, proxies = OrderedDict()\\n\\n    def send(\\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\\n    ):\\n        \\\"\\\"\\\"Sends PreparedRequest object. Returns Response object.\\n    \\n        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.\\n        :param stream: (optional) Whether to stream the request content.\\n        :param timeout: (optional) How long to wait for the server to send\\n            data before giving up, as a float, or a :ref:`(connect timeout,\\n            read timeout) &lt;timeouts&gt;` tuple.\\n        :type timeout: float or tuple or urllib3 Timeout object\\n        :param verify: (optional) Either a boolean, in which case it controls whether\\n            we verify the server's TLS certificate, or a string, in which case it\\n            must be a path to a CA bundle to use\\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\\n        :param proxies: (optional) The proxies dictionary to apply to the request.\\n        :rtype: requests.Response\\n        \\\"\\\"\\\"\\n    \\n        try:\\n            conn = self.get_connection_with_tls_context(\\n                request, verify, proxies=proxies, cert=cert\\n            )\\n        except LocationValueError as e:\\n            raise InvalidURL(e, request=request)\\n    \\n        self.cert_verify(conn, request.url, verify, cert)\\n        url = self.request_url(request, proxies)\\n        self.add_headers(\\n            request,\\n            stream=stream,\\n            timeout=timeout,\\n            verify=verify,\\n            cert=cert,\\n            proxies=proxies,\\n        )\\n    \\n        chunked = not (request.body is None or \\\"Content-Length\\\" in request.headers)\\n    \\n        if isinstance(timeout, tuple):\\n            try:\\n                connect, read = timeout\\n                timeout = TimeoutSauce(connect=connect, read=read)\\n            except ValueError:\\n                raise ValueError(\\n                    f\\\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \\\"\\n                    f\\\"or a single float to set both timeouts to the same value.\\\"\\n                )\\n        elif isinstance(timeout, TimeoutSauce):\\n            pass\\n        else:\\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\\n    \\n        try:\\n            resp = conn.urlopen(\\n                method=request.method,\\n                url=url,\\n                body=request.body,\\n                headers=request.headers,\\n                redirect=False,\\n                assert_same_host=False,\\n                preload_content=False,\\n                decode_content=False,\\n                retries=self.max_retries,\\n                timeout=timeout,\\n                chunked=chunked,\\n            )\\n    \\n        except (ProtocolError, OSError) as err:\\n            raise ConnectionError(err, request=request)\\n    \\n        except MaxRetryError as e:\\n            if isinstance(e.reason, ConnectTimeoutError):\\n                # TODO: Remove this in 3.0.0: see #2811\\n                if not isinstance(e.reason, NewConnectionError):\\n                    raise ConnectTimeout(e, request=request)\\n    \\n            if isinstance(e.reason, ResponseError):\\n                raise RetryError(e, request=request)\\n    \\n            if isinstance(e.reason, _ProxyError):\\n                raise ProxyError(e, request=request)\\n    \\n            if isinstance(e.reason, _SSLError):\\n                # This branch is for urllib3 v1.22 and later.\\n                raise SSLError(e, request=request)\\n    \\n&gt;           raise ConnectionError(e, request=request)\\nE           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py:700: ConnectionError\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"登录模块备注\",\"status\":\"broken\",\"statusMessage\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\",\"statusTrace\":\"self = &lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;\\n\\n    def _new_conn(self) -&gt; socket.socket:\\n        \\\"\\\"\\\"Establish a socket connection and set nodelay settings on it.\\n    \\n        :return: New socket connection.\\n        \\\"\\\"\\\"\\n        try:\\n&gt;           sock = connection.create_connection(\\n                (self._dns_host, self.port),\\n                self.timeout,\\n                source_address=self.source_address,\\n                socket_options=self.socket_options,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:199: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\connection.py:85: in create_connection\\n    raise err\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\naddress = ('127.0.0.1', 8080), timeout = None, source_address = None\\nsocket_options = [(6, 1, 1)]\\n\\n    def create_connection(\\n        address: tuple[str, int],\\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\\n        source_address: tuple[str, int] | None = None,\\n        socket_options: _TYPE_SOCKET_OPTIONS | None = None,\\n    ) -&gt; socket.socket:\\n        \\\"\\\"\\\"Connect to *address* and return the socket object.\\n    \\n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\\n        port)``) and return the socket object.  Passing the optional\\n        *timeout* parameter will set the timeout on the socket instance\\n        before attempting to connect.  If no *timeout* is supplied, the\\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\\n        is used.  If *source_address* is set it must be a tuple of (host, port)\\n        for the socket to bind as a source address before making the connection.\\n        An host of '' or port 0 tells the OS to use the default.\\n        \\\"\\\"\\\"\\n    \\n        host, port = address\\n        if host.startswith(\\\"[\\\"):\\n            host = host.strip(\\\"[]\\\")\\n        err = None\\n    \\n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\\n        # The original create_connection function always returns all records.\\n        family = allowed_gai_family()\\n    \\n        try:\\n            host.encode(\\\"idna\\\")\\n        except UnicodeError:\\n            raise LocationParseError(f\\\"'{host}', label empty or too long\\\") from None\\n    \\n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\\n            af, socktype, proto, canonname, sa = res\\n            sock = None\\n            try:\\n                sock = socket.socket(af, socktype, proto)\\n    \\n                # If provided, set socket level options before connecting.\\n                _set_socket_options(sock, socket_options)\\n    \\n                if timeout is not _DEFAULT_TIMEOUT:\\n                    sock.settimeout(timeout)\\n                if source_address:\\n                    sock.bind(source_address)\\n&gt;               sock.connect(sa)\\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\connection.py:73: ConnectionRefusedError\\n\\nThe above exception was the direct cause of the following exception:\\n\\nself = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000022BD78A0520&gt;\\nmethod = 'POST', url = '/login_safe'\\nbody = 'password=XbXHJrNLwoTVcyfqM9eTgQ%3D%3D&username=mdSm0RmB%2BxAKrTah3DG31A%3D%3D'\\nheaders = {'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '77', 'Content-Type': 'application/x-www-form-urlencoded'}\\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\\nredirect = False, assert_same_host = False\\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\\nrelease_conn = False, chunked = False, body_pos = None, preload_content = False\\ndecode_content = False, response_kw = {}\\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/login_safe', query=None, fragment=None)\\ndestination_scheme = None, conn = None, release_this_conn = True\\nhttp_tunnel_required = False, err = None, clean_exit = False\\n\\n    def urlopen(  # type: ignore[override]\\n        self,\\n        method: str,\\n        url: str,\\n        body: _TYPE_BODY | None = None,\\n        headers: typing.Mapping[str, str] | None = None,\\n        retries: Retry | bool | int | None = None,\\n        redirect: bool = True,\\n        assert_same_host: bool = True,\\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\\n        pool_timeout: int | None = None,\\n        release_conn: bool | None = None,\\n        chunked: bool = False,\\n        body_pos: _TYPE_BODY_POSITION | None = None,\\n        preload_content: bool = True,\\n        decode_content: bool = True,\\n        **response_kw: typing.Any,\\n    ) -&gt; BaseHTTPResponse:\\n        \\\"\\\"\\\"\\n        Get a connection from the pool and perform an HTTP request. This is the\\n        lowest level call for making a request, so you'll need to specify all\\n        the raw details.\\n    \\n        .. note::\\n    \\n           More commonly, it's appropriate to use a convenience method\\n           such as :meth:`request`.\\n    \\n        .. note::\\n    \\n           `release_conn` will only behave as expected if\\n           `preload_content=False` because we want to make\\n           `preload_content=False` the default behaviour someday soon without\\n           breaking backwards compatibility.\\n    \\n        :param method:\\n            HTTP request method (such as GET, POST, PUT, etc.)\\n    \\n        :param url:\\n            The URL to perform the request on.\\n    \\n        :param body:\\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\\n    \\n        :param headers:\\n            Dictionary of custom headers to send, such as User-Agent,\\n            If-None-Match, etc. If None, pool headers are used. If provided,\\n            these headers completely replace any pool-specific headers.\\n    \\n        :param retries:\\n            Configure the number of retries to allow before raising a\\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\\n    \\n            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a\\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\\n            over different types of retries.\\n            Pass an integer number to retry connection errors that many times,\\n            but no other types of errors. Pass zero to never retry.\\n    \\n            If ``False``, then retries are disabled and any exception is raised\\n            immediately. Also, instead of raising a MaxRetryError on redirects,\\n            the redirect response will be returned.\\n    \\n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\\n    \\n        :param redirect:\\n            If True, automatically handle redirects (status codes 301, 302,\\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\\n            will disable redirect, too.\\n    \\n        :param assert_same_host:\\n            If ``True``, will make sure that the host of the pool requests is\\n            consistent else will raise HostChangedError. When ``False``, you can\\n            use the pool on an HTTP proxy and request foreign hosts.\\n    \\n        :param timeout:\\n            If specified, overrides the default timeout for this one\\n            request. It may be a float (in seconds) or an instance of\\n            :class:`urllib3.util.Timeout`.\\n    \\n        :param pool_timeout:\\n            If set and the pool is set to block=True, then this method will\\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\\n            connection is available within the time period.\\n    \\n        :param bool preload_content:\\n            If True, the response's body will be preloaded into memory.\\n    \\n        :param bool decode_content:\\n            If True, will attempt to decode the body based on the\\n            'content-encoding' header.\\n    \\n        :param release_conn:\\n            If False, then the urlopen call will not release the connection\\n            back into the pool once a response is received (but will release if\\n            you read the entire contents of the response such as when\\n            `preload_content=True`). This is useful if you're not preloading\\n            the response's content immediately. You will need to call\\n            ``r.release_conn()`` on the response ``r`` to return the connection\\n            back into the pool. If None, it takes the value of ``preload_content``\\n            which defaults to ``True``.\\n    \\n        :param bool chunked:\\n            If True, urllib3 will send the body using chunked transfer\\n            encoding. Otherwise, urllib3 will send the body using the standard\\n            content-length form. Defaults to False.\\n    \\n        :param int body_pos:\\n            Position to seek to in file-like body in the event of a retry or\\n            redirect. Typically this won't need to be set because urllib3 will\\n            auto-populate the value when needed.\\n        \\\"\\\"\\\"\\n        parsed_url = parse_url(url)\\n        destination_scheme = parsed_url.scheme\\n    \\n        if headers is None:\\n            headers = self.headers\\n    \\n        if not isinstance(retries, Retry):\\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\\n    \\n        if release_conn is None:\\n            release_conn = preload_content\\n    \\n        # Check host\\n        if assert_same_host and not self.is_same_host(url):\\n            raise HostChangedError(self, url, retries)\\n    \\n        # Ensure that the URL we're connecting to is properly encoded\\n        if url.startswith(\\\"/\\\"):\\n            url = to_str(_encode_target(url))\\n        else:\\n            url = to_str(parsed_url.url)\\n    \\n        conn = None\\n    \\n        # Track whether `conn` needs to be released before\\n        # returning/raising/recursing. Update this variable if necessary, and\\n        # leave `release_conn` constant throughout the function. That way, if\\n        # the function recurses, the original value of `release_conn` will be\\n        # passed down into the recursive call, and its value will be respected.\\n        #\\n        # See issue #651 [1] for details.\\n        #\\n        # [1] &lt;https://github.com/urllib3/urllib3/issues/651&gt;\\n        release_this_conn = release_conn\\n    \\n        http_tunnel_required = connection_requires_http_tunnel(\\n            self.proxy, self.proxy_config, destination_scheme\\n        )\\n    \\n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\\n        # have to copy the headers dict so we can safely change it without those\\n        # changes being reflected in anyone else's copy.\\n        if not http_tunnel_required:\\n            headers = headers.copy()  # type: ignore[attr-defined]\\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\\n    \\n        # Must keep the exception bound to a separate variable or else Python 3\\n        # complains about UnboundLocalError.\\n        err = None\\n    \\n        # Keep track of whether we cleanly exited the except block. This\\n        # ensures we do proper cleanup in finally.\\n        clean_exit = False\\n    \\n        # Rewind body position, if needed. Record current position\\n        # for future rewinds in the event of a redirect/retry.\\n        body_pos = set_file_position(body, body_pos)\\n    \\n        try:\\n            # Request a connection from the queue.\\n            timeout_obj = self._get_timeout(timeout)\\n            conn = self._get_conn(timeout=pool_timeout)\\n    \\n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\\n    \\n            # Is this a closed/new connection that requires CONNECT tunnelling?\\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\\n                try:\\n                    self._prepare_proxy(conn)\\n                except (BaseSSLError, OSError, SocketTimeout) as e:\\n                    self._raise_timeout(\\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\\n                    )\\n                    raise\\n    \\n            # If we're going to release the connection in ``finally:``, then\\n            # the response doesn't need to know about the connection. Otherwise\\n            # it will also try to release it and we'll have a double-release\\n            # mess.\\n            response_conn = conn if not release_conn else None\\n    \\n            # Make the request on the HTTPConnection object\\n&gt;           response = self._make_request(\\n                conn,\\n                method,\\n                url,\\n                timeout=timeout_obj,\\n                body=body,\\n                headers=headers,\\n                chunked=chunked,\\n                retries=retries,\\n                response_conn=response_conn,\\n                preload_content=preload_content,\\n                decode_content=decode_content,\\n                **response_kw,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:789: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:495: in _make_request\\n    conn.request(\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:441: in request\\n    self.endheaders()\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:1278: in endheaders\\n    self._send_output(message_body, encode_chunked=encode_chunked)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:1038: in _send_output\\n    self.send(msg)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\http\\\\client.py:976: in send\\n    self.connect()\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:279: in connect\\n    self.sock = self._new_conn()\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = &lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;\\n\\n    def _new_conn(self) -&gt; socket.socket:\\n        \\\"\\\"\\\"Establish a socket connection and set nodelay settings on it.\\n    \\n        :return: New socket connection.\\n        \\\"\\\"\\\"\\n        try:\\n            sock = connection.create_connection(\\n                (self._dns_host, self.port),\\n                self.timeout,\\n                source_address=self.source_address,\\n                socket_options=self.socket_options,\\n            )\\n        except socket.gaierror as e:\\n            raise NameResolutionError(self.host, self, e) from e\\n        except SocketTimeout as e:\\n            raise ConnectTimeoutError(\\n                self,\\n                f\\\"Connection to {self.host} timed out. (connect timeout={self.timeout})\\\",\\n            ) from e\\n    \\n        except OSError as e:\\n&gt;           raise NewConnectionError(\\n                self, f\\\"Failed to establish a new connection: {e}\\\"\\n            ) from e\\nE           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connection.py:214: NewConnectionError\\n\\nThe above exception was the direct cause of the following exception:\\n\\nself = &lt;requests.adapters.HTTPAdapter object at 0x0000022BD78A2C50&gt;\\nrequest = &lt;PreparedRequest [POST]&gt;, stream = False\\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\\ncert = None, proxies = OrderedDict()\\n\\n    def send(\\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\\n    ):\\n        \\\"\\\"\\\"Sends PreparedRequest object. Returns Response object.\\n    \\n        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.\\n        :param stream: (optional) Whether to stream the request content.\\n        :param timeout: (optional) How long to wait for the server to send\\n            data before giving up, as a float, or a :ref:`(connect timeout,\\n            read timeout) &lt;timeouts&gt;` tuple.\\n        :type timeout: float or tuple or urllib3 Timeout object\\n        :param verify: (optional) Either a boolean, in which case it controls whether\\n            we verify the server's TLS certificate, or a string, in which case it\\n            must be a path to a CA bundle to use\\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\\n        :param proxies: (optional) The proxies dictionary to apply to the request.\\n        :rtype: requests.Response\\n        \\\"\\\"\\\"\\n    \\n        try:\\n            conn = self.get_connection_with_tls_context(\\n                request, verify, proxies=proxies, cert=cert\\n            )\\n        except LocationValueError as e:\\n            raise InvalidURL(e, request=request)\\n    \\n        self.cert_verify(conn, request.url, verify, cert)\\n        url = self.request_url(request, proxies)\\n        self.add_headers(\\n            request,\\n            stream=stream,\\n            timeout=timeout,\\n            verify=verify,\\n            cert=cert,\\n            proxies=proxies,\\n        )\\n    \\n        chunked = not (request.body is None or \\\"Content-Length\\\" in request.headers)\\n    \\n        if isinstance(timeout, tuple):\\n            try:\\n                connect, read = timeout\\n                timeout = TimeoutSauce(connect=connect, read=read)\\n            except ValueError:\\n                raise ValueError(\\n                    f\\\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \\\"\\n                    f\\\"or a single float to set both timeouts to the same value.\\\"\\n                )\\n        elif isinstance(timeout, TimeoutSauce):\\n            pass\\n        else:\\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\\n    \\n        try:\\n&gt;           resp = conn.urlopen(\\n                method=request.method,\\n                url=url,\\n                body=request.body,\\n                headers=request.headers,\\n                redirect=False,\\n                assert_same_host=False,\\n                preload_content=False,\\n                decode_content=False,\\n                retries=self.max_retries,\\n                timeout=timeout,\\n                chunked=chunked,\\n            )\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py:667: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\connectionpool.py:843: in urlopen\\n    retries = retries.increment(\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\\nmethod = 'POST', url = '/login_safe', response = None\\nerror = NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。')\\n_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000022BD78A0520&gt;\\n_stacktrace = &lt;traceback object at 0x0000022BD77833C0&gt;\\n\\n    def increment(\\n        self,\\n        method: str | None = None,\\n        url: str | None = None,\\n        response: BaseHTTPResponse | None = None,\\n        error: Exception | None = None,\\n        _pool: ConnectionPool | None = None,\\n        _stacktrace: TracebackType | None = None,\\n    ) -&gt; Self:\\n        \\\"\\\"\\\"Return a new Retry object with incremented retry counters.\\n    \\n        :param response: A response object, or None, if the server did not\\n            return a response.\\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\\n        :param Exception error: An error encountered during the request, or\\n            None if the response was received successfully.\\n    \\n        :return: A new ``Retry`` object.\\n        \\\"\\\"\\\"\\n        if self.total is False and error:\\n            # Disabled, indicate to re-raise the error.\\n            raise reraise(type(error), error, _stacktrace)\\n    \\n        total = self.total\\n        if total is not None:\\n            total -= 1\\n    \\n        connect = self.connect\\n        read = self.read\\n        redirect = self.redirect\\n        status_count = self.status\\n        other = self.other\\n        cause = \\\"unknown\\\"\\n        status = None\\n        redirect_location = None\\n    \\n        if error and self._is_connection_error(error):\\n            # Connect retry?\\n            if connect is False:\\n                raise reraise(type(error), error, _stacktrace)\\n            elif connect is not None:\\n                connect -= 1\\n    \\n        elif error and self._is_read_error(error):\\n            # Read retry?\\n            if read is False or method is None or not self._is_method_retryable(method):\\n                raise reraise(type(error), error, _stacktrace)\\n            elif read is not None:\\n                read -= 1\\n    \\n        elif error:\\n            # Other retry?\\n            if other is not None:\\n                other -= 1\\n    \\n        elif response and response.get_redirect_location():\\n            # Redirect retry?\\n            if redirect is not None:\\n                redirect -= 1\\n            cause = \\\"too many redirects\\\"\\n            response_redirect_location = response.get_redirect_location()\\n            if response_redirect_location:\\n                redirect_location = response_redirect_location\\n            status = response.status\\n    \\n        else:\\n            # Incrementing because of a server error like a 500 in\\n            # status_forcelist and the given method is in the allowed_methods\\n            cause = ResponseError.GENERIC_ERROR\\n            if response and response.status:\\n                if status_count is not None:\\n                    status_count -= 1\\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\\n                status = response.status\\n    \\n        history = self.history + (\\n            RequestHistory(method, url, error, status, redirect_location),\\n        )\\n    \\n        new_retry = self.new(\\n            total=total,\\n            connect=connect,\\n            read=read,\\n            redirect=redirect,\\n            status=status_count,\\n            other=other,\\n            history=history,\\n        )\\n    \\n        if new_retry.is_exhausted():\\n            reason = error or ResponseError(cause)\\n&gt;           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\urllib3\\\\util\\\\retry.py:519: MaxRetryError\\n\\nDuring handling of the above exception, another exception occurred:\\n\\nself = &lt;apirun.core.ApiTestRunner.TestRunner object at 0x0000022BD77321D0&gt;\\ncaseinfo = {'_case_name': '加密接口-正确的用户名和密码', 'context': {'desc': '正确的用户名和密码', 'password': '123456', 'username': 'tony'}, 'desc': '加密接口', 'featureName': '登录模块', ...}\\n\\n    def test_case_execute(self, caseinfo):\\n        print(\\\"当前的测试数据：\\\", caseinfo)\\n        # TODO 2-1: 动态生成一下当前的测试用例标题\\n        # allure.dynamic.title(caseinfo[\\\"_case_name\\\"])\\n    \\n        # TODO 2-1 : 调用动态生成标题的方法\\n        dynamicTitle(caseinfo)\\n    \\n        # TODO 2-2: 基于我们步骤一步步进行执行\\n        try:\\n            # 实例化关键字对象\\n            keywords = KeyWords()\\n    \\n            # 获取当前用例变量，方便后续的渲染\\n            local_context = caseinfo.get(\\\"context\\\",{})\\n            context = copy.deepcopy(g_context().show_dict())\\n            context.update(local_context)\\n    \\n            steps = caseinfo.get(\\\"steps\\\", None)\\n            for step in steps:\\n                #  提示信息\\n                step_name = list(step.keys())[0]\\n                step_value = list(step.values())[0]\\n                print(f\\\"开始执行步骤：{step_name} - {step_value}\\\")\\n    \\n                # TODO : 每一个步骤进行变量的渲染\\n                context = copy.deepcopy(g_context().show_dict())\\n                context.update(local_context)\\n                step_value = eval(refresh(step_value, context))\\n    \\n                # 基于每个步骤的关键字，找到对应的方法，然后把参数给它\\n                #  通过【反射】的方式去找到对应的方法\\n                with allure.step(step_name):\\n                    key = step_value[\\\"关键字\\\"]  # 具体的方法名, 在 keywords 里面找到这个方法\\n                    try:\\n                        key_func = keywords.__getattribute__(key)  # 从keywords获取到对应方法\\n                    except AttributeError as e:\\n                        print(\\\"没有这个关键字方法\\\", e)\\n&gt;                   key_func(**step_value)  # 调用方法\\n\\ncore\\\\ApiTestRunner.py:62: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\nextend\\\\keywords.py:79: in request_post_form_urlencoded\\n    response = requests.post(**request_data)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py:115: in post\\n    return request(\\\"post\\\", url, data=data, json=json, **kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py:59: in request\\n    return session.request(method=method, url=url, **kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py:589: in request\\n    resp = self.send(prep, **send_kwargs)\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py:703: in send\\n    r = adapter.send(request, **kwargs)\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n\\nself = &lt;requests.adapters.HTTPAdapter object at 0x0000022BD78A2C50&gt;\\nrequest = &lt;PreparedRequest [POST]&gt;, stream = False\\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\\ncert = None, proxies = OrderedDict()\\n\\n    def send(\\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\\n    ):\\n        \\\"\\\"\\\"Sends PreparedRequest object. Returns Response object.\\n    \\n        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.\\n        :param stream: (optional) Whether to stream the request content.\\n        :param timeout: (optional) How long to wait for the server to send\\n            data before giving up, as a float, or a :ref:`(connect timeout,\\n            read timeout) &lt;timeouts&gt;` tuple.\\n        :type timeout: float or tuple or urllib3 Timeout object\\n        :param verify: (optional) Either a boolean, in which case it controls whether\\n            we verify the server's TLS certificate, or a string, in which case it\\n            must be a path to a CA bundle to use\\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\\n        :param proxies: (optional) The proxies dictionary to apply to the request.\\n        :rtype: requests.Response\\n        \\\"\\\"\\\"\\n    \\n        try:\\n            conn = self.get_connection_with_tls_context(\\n                request, verify, proxies=proxies, cert=cert\\n            )\\n        except LocationValueError as e:\\n            raise InvalidURL(e, request=request)\\n    \\n        self.cert_verify(conn, request.url, verify, cert)\\n        url = self.request_url(request, proxies)\\n        self.add_headers(\\n            request,\\n            stream=stream,\\n            timeout=timeout,\\n            verify=verify,\\n            cert=cert,\\n            proxies=proxies,\\n        )\\n    \\n        chunked = not (request.body is None or \\\"Content-Length\\\" in request.headers)\\n    \\n        if isinstance(timeout, tuple):\\n            try:\\n                connect, read = timeout\\n                timeout = TimeoutSauce(connect=connect, read=read)\\n            except ValueError:\\n                raise ValueError(\\n                    f\\\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \\\"\\n                    f\\\"or a single float to set both timeouts to the same value.\\\"\\n                )\\n        elif isinstance(timeout, TimeoutSauce):\\n            pass\\n        else:\\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\\n    \\n        try:\\n            resp = conn.urlopen(\\n                method=request.method,\\n                url=url,\\n                body=request.body,\\n                headers=request.headers,\\n                redirect=False,\\n                assert_same_host=False,\\n                preload_content=False,\\n                decode_content=False,\\n                retries=self.max_retries,\\n                timeout=timeout,\\n                chunked=chunked,\\n            )\\n    \\n        except (ProtocolError, OSError) as err:\\n            raise ConnectionError(err, request=request)\\n    \\n        except MaxRetryError as e:\\n            if isinstance(e.reason, ConnectTimeoutError):\\n                # TODO: Remove this in 3.0.0: see #2811\\n                if not isinstance(e.reason, NewConnectionError):\\n                    raise ConnectTimeout(e, request=request)\\n    \\n            if isinstance(e.reason, ResponseError):\\n                raise RetryError(e, request=request)\\n    \\n            if isinstance(e.reason, _ProxyError):\\n                raise ProxyError(e, request=request)\\n    \\n            if isinstance(e.reason, _SSLError):\\n                # This branch is for urllib3 v1.22 and later.\\n                raise SSLError(e, request=request)\\n    \\n&gt;           raise ConnectionError(e, request=request)\\nE           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\\nD:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py:700: ConnectionError\",\"steps\":[{\"name\":\"进行数据加密 - 用户名\",\"time\":{\"start\":1728414501059,\"stop\":1728414501074,\"duration\":15},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：对数据进行AES加密处理\",\"time\":{\"start\":1728414501059,\"stop\":1728414501074,\"duration\":15},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'encrypt_aes'\"},{\"name\":\"data\",\"value\":\"'tony'\"},{\"name\":\"VARNAME\",\"value\":\"'aes_username'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"进行数据加密 - 密码\",\"time\":{\"start\":1728414501075,\"stop\":1728414501075,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：对数据进行AES加密处理\",\"time\":{\"start\":1728414501075,\"stop\":1728414501075,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'encrypt_aes'\"},{\"name\":\"data\",\"value\":\"'123456'\"},{\"name\":\"VARNAME\",\"value\":\"'aes_password'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414501076,\"stop\":1728414503202,\"duration\":2126},\"status\":\"broken\",\"statusMessage\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\",\"statusTrace\":\"  File \\\"G:\\\\华测\\\\接口自动化\\\\扩展：自动化框架转成核心执行器\\\\api-engine\\\\apirun\\\\core\\\\ApiTestRunner.py\\\", line 62, in test_case_execute\\n    key_func(**step_value)  # 调用方法\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\allure_commons\\\\_allure.py\\\", line 192, in impl\\n    return func(*a, **kw)\\n  File \\\"G:\\\\华测\\\\接口自动化\\\\扩展：自动化框架转成核心执行器\\\\api-engine\\\\apirun\\\\extend\\\\keywords.py\\\", line 79, in request_post_form_urlencoded\\n    response = requests.post(**request_data)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py\\\", line 115, in post\\n    return request(\\\"post\\\", url, data=data, json=json, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py\\\", line 59, in request\\n    return session.request(method=method, url=url, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py\\\", line 589, in request\\n    resp = self.send(prep, **send_kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py\\\", line 703, in send\\n    r = adapter.send(request, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py\\\", line 700, in send\\n    raise ConnectionError(e, request=request)\\n\",\"steps\":[{\"name\":\"参数数据：发送Post请求-form_urlencoded\",\"time\":{\"start\":1728414501076,\"stop\":1728414503095,\"duration\":2019},\"status\":\"broken\",\"statusMessage\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\\n\",\"statusTrace\":\"  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\allure_commons\\\\_allure.py\\\", line 192, in impl\\n    return func(*a, **kw)\\n  File \\\"G:\\\\华测\\\\接口自动化\\\\扩展：自动化框架转成核心执行器\\\\api-engine\\\\apirun\\\\extend\\\\keywords.py\\\", line 79, in request_post_form_urlencoded\\n    response = requests.post(**request_data)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py\\\", line 115, in post\\n    return request(\\\"post\\\", url, data=data, json=json, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\api.py\\\", line 59, in request\\n    return session.request(method=method, url=url, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py\\\", line 589, in request\\n    resp = self.send(prep, **send_kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\sessions.py\\\", line 703, in send\\n    r = adapter.send(request, **kwargs)\\n  File \\\"D:\\\\ProgramData\\\\miniforge3\\\\envs\\\\autotest\\\\lib\\\\site-packages\\\\requests\\\\adapters.py\\\", line 700, in send\\n    raise ConnectionError(e, request=request)\\n\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_form_urlencoded'\"},{\"name\":\"URL\",\"value\":\"'http://127.0.0.1:8080/login_safe'\"},{\"name\":\"DATA\",\"value\":\"{'password': 'XbXHJrNLwoTVcyfqM9eTgQ==', 'username': 'mdSm0RmB+xAKrTah3DG31A=='}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":true,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"52eb79fa7ffaf37c\",\"name\":\"log\",\"source\":\"52eb79fa7ffaf37c.txt\",\"type\":\"text/plain\",\"size\":106},{\"uid\":\"444d4863699e53fc\",\"name\":\"stdout\",\"source\":\"444d4863699e53fc.txt\",\"type\":\"text/plain\",\"size\":2225}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":true,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"加密项目\"},{\"name\":\"feature\",\"value\":\"登录模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[{\"name\":\"Test defects\",\"matchedStatuses\":[],\"flaky\":false}],\"tags\":[]},\"source\":\"79652414956fd36.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/7a1f090ca757623.json": "{\"uid\":\"7a1f090ca757623\",\"name\":\"提交订单-购物车\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"27af8788a0cf4ac985e2d59266b776ee\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205},\"description\":\"提交订单模块备注\",\"descriptionHtml\":\"&lt;p&gt;提交订单模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"提交订单模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414500674,\"stop\":1728414500873,\"duration\":199},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-row_json\",\"time\":{\"start\":1728414500674,\"stop\":1728414500873,\"duration\":199},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_row_json'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': '/api/buy/add', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"},{\"name\":\"DATA\",\"value\":\"{'buy_type': 'cart', 'address_id': '14587', 'ids': '28833', 'payment_id': 4, 'user_note': '通过购物车进行下单'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414500875,\"stop\":1728414500875,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414500875,\"stop\":1728414500875,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414500877,\"stop\":1728414500877,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414500877,\"stop\":1728414500877,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'提交成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'提交成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"4abbb61901269f4f\",\"name\":\"log\",\"source\":\"4abbb61901269f4f.txt\",\"type\":\"text/plain\",\"size\":312},{\"uid\":\"3aeaee54aacc032c\",\"name\":\"stdout\",\"source\":\"3aeaee54aacc032c.txt\",\"type\":\"text/plain\",\"size\":1882}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"订单模块\"},{\"name\":\"feature\",\"value\":\"提交订单模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"7a1f090ca757623.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/7b9468eb5499881b.json": "{\"uid\":\"7b9468eb5499881b\",\"name\":\"查询地址列表-提交订单用\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"4b6165e7e948b32a9aab372812228d8a\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727},\"description\":\"地址列表模块备注\",\"descriptionHtml\":\"&lt;p&gt;地址列表模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"地址列表模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414498941,\"stop\":1728414500577,\"duration\":1636},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Get请求\",\"time\":{\"start\":1728414498941,\"stop\":1728414500577,\"duration\":1636},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_get'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/useraddress/index', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414500578,\"stop\":1728414500623,\"duration\":45},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414500578,\"stop\":1728414500623,\"duration\":45},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414500624,\"stop\":1728414500624,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414500624,\"stop\":1728414500624,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'success'\"},{\"name\":\"EXPECTED\",\"value\":\"'success'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-add_id\",\"time\":{\"start\":1728414500625,\"stop\":1728414500667,\"duration\":42},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414500625,\"stop\":1728414500667,\"duration\":42},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..id'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'add_id'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"11a464ce9c4a18e0\",\"name\":\"log\",\"source\":\"11a464ce9c4a18e0.txt\",\"type\":\"text/plain\",\"size\":318},{\"uid\":\"62bdef39f3c93405\",\"name\":\"stdout\",\"source\":\"62bdef39f3c93405.txt\",\"type\":\"text/plain\",\"size\":2290}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":8,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"地址模块\"},{\"name\":\"feature\",\"value\":\"地址模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"7b9468eb5499881b.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/7e0521dbe55b45fe.json": "{\"uid\":\"7e0521dbe55b45fe\",\"name\":\"T2-登录用例-正确的用户名和密码\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"04d671ecdbb6725d51de5dd9352c5070\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182},\"description\":\"登录模块备注\",\"descriptionHtml\":\"&lt;p&gt;登录模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"登录模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414496369,\"stop\":1728414496546,\"duration\":177},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-form_urlencoded\",\"time\":{\"start\":1728414496370,\"stop\":1728414496546,\"duration\":176},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_form_urlencoded'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': '/api/user/login', 'application': 'app'}\"},{\"name\":\"DATA\",\"value\":\"{'accounts': 'hami', 'pwd': '123456', 'type': 'username'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414496547,\"stop\":1728414496547,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414496547,\"stop\":1728414496547,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-TOKEN\",\"time\":{\"start\":1728414496548,\"stop\":1728414496548,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414496548,\"stop\":1728414496548,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..token'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_token'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414496549,\"stop\":1728414496549,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414496549,\"stop\":1728414496549,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'登录成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'登录成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"c1333aa28343e097\",\"name\":\"log\",\"source\":\"c1333aa28343e097.txt\",\"type\":\"text/plain\",\"size\":276},{\"uid\":\"9010743f5ccb597e\",\"name\":\"stdout\",\"source\":\"9010743f5ccb597e.txt\",\"type\":\"text/plain\",\"size\":2383}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":8,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"用户模块\"},{\"name\":\"feature\",\"value\":\"登录模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"7e0521dbe55b45fe.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/8efb5df6e5394699.json": "{\"uid\":\"8efb5df6e5394699\",\"name\":\"T2-登录用例-错误的用户名和密码\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"6d862e7d162b2534811fdb18d1156959\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172},\"description\":\"登录模块备注\",\"descriptionHtml\":\"&lt;p&gt;登录模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"登录模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414496192,\"stop\":1728414496358,\"duration\":166},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-form_urlencoded\",\"time\":{\"start\":1728414496192,\"stop\":1728414496358,\"duration\":166},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_form_urlencoded'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': '/api/user/login', 'application': 'app'}\"},{\"name\":\"DATA\",\"value\":\"{'accounts': 'hami', 'pwd': '1234567', 'type': 'username'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414496359,\"stop\":1728414496359,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414496359,\"stop\":1728414496359,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414496360,\"stop\":1728414496361,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414496360,\"stop\":1728414496360,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'密码错误'\"},{\"name\":\"EXPECTED\",\"value\":\"'密码错误'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-全量断言-等于\",\"time\":{\"start\":1728414496361,\"stop\":1728414496361,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：全量断言-对比两个Json的差异\",\"time\":{\"start\":1728414496361,\"stop\":1728414496361,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_json_DeepDiff'\"},{\"name\":\"json1\",\"value\":\"{'name': 'hami', 'age': 18}\"},{\"name\":\"json2\",\"value\":\"{'name': 'hami', 'age': 18}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-全量断言-过滤字段\",\"time\":{\"start\":1728414496362,\"stop\":1728414496362,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：全量断言-对比两个Json的差异\",\"time\":{\"start\":1728414496362,\"stop\":1728414496362,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_json_DeepDiff'\"},{\"name\":\"json1\",\"value\":\"{'name': 'hami', 'age': 18, 'city': '长沙'}\"},{\"name\":\"json2\",\"value\":\"{'name': 'hami', 'age': 18}\"},{\"name\":\"过滤字段\",\"value\":\"{'city': None}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-全量断言-不等于\",\"time\":{\"start\":1728414496363,\"stop\":1728414496363,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：全量断言-对比两个Json的差异\",\"time\":{\"start\":1728414496363,\"stop\":1728414496363,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_json_DeepDiff'\"},{\"name\":\"json1\",\"value\":\"[1, 2, 3]\"},{\"name\":\"json2\",\"value\":\"[1, 3, 2]\"},{\"name\":\"忽略顺序\",\"value\":\"True\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"ee581da4beb68ebc\",\"name\":\"log\",\"source\":\"ee581da4beb68ebc.txt\",\"type\":\"text/plain\",\"size\":276},{\"uid\":\"eb6a2e54bbd87ada\",\"name\":\"stdout\",\"source\":\"eb6a2e54bbd87ada.txt\",\"type\":\"text/plain\",\"size\":2762}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":12,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"用户模块\"},{\"name\":\"feature\",\"value\":\"登录模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"8efb5df6e5394699.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/ae8f4ed1618bec7b.json": "{\"uid\":\"ae8f4ed1618bec7b\",\"name\":\"添加地址接口\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"930b0a7c14bb9d14e2567a1011a5a029\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142},\"description\":\"添加地址模块备注\",\"descriptionHtml\":\"&lt;p&gt;添加地址模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"添加地址模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414498795,\"stop\":1728414498934,\"duration\":139},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Post请求-row_json\",\"time\":{\"start\":1728414498795,\"stop\":1728414498933,\"duration\":138},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_post_row_json'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/useraddress/save', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"},{\"name\":\"DATA\",\"value\":\"{'name': '李文静', 'tel': 15096964646, 'province': 18, 'city': 27, 'county': 2916, 'address': '2栋403室'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414498934,\"stop\":1728414498935,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414498934,\"stop\":1728414498935,\"duration\":1},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414498935,\"stop\":1728414498936,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414498936,\"stop\":1728414498936,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'新增成功'\"},{\"name\":\"EXPECTED\",\"value\":\"'新增成功'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"3615fd726f5ddaef\",\"name\":\"log\",\"source\":\"3615fd726f5ddaef.txt\",\"type\":\"text/plain\",\"size\":318},{\"uid\":\"11368f446ed88a52\",\"name\":\"stdout\",\"source\":\"11368f446ed88a52.txt\",\"type\":\"text/plain\",\"size\":1838}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":6,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"地址模块\"},{\"name\":\"feature\",\"value\":\"地址模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"ae8f4ed1618bec7b.json\",\"parameterValues\":[\"''\"]}", 
 "data/test-cases/f231b963eaf35a29.json": "{\"uid\":\"f231b963eaf35a29\",\"name\":\"查询购物车列表数据\",\"fullName\":\"core.ApiTestRunner.TestRunner#test_case_execute\",\"historyId\":\"9b05d4738e82a298f1372cd4a1017e9e\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163},\"description\":\"查看购物车模块备注\",\"descriptionHtml\":\"&lt;p&gt;查看购物车模块备注&lt;/p&gt;\\n\",\"status\":\"passed\",\"flaky\":false,\"newFailed\":false,\"newBroken\":false,\"newPassed\":false,\"retriesCount\":0,\"retriesStatusChange\":false,\"beforeStages\":[{\"name\":\"_session_faker\",\"time\":{\"start\":1728414495500,\"stop\":1728414495710,\"duration\":210},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":false,\"stepsCount\":0,\"attachmentStep\":false}],\"testStage\":{\"description\":\"查看购物车模块备注\",\"status\":\"passed\",\"steps\":[{\"name\":\"发送Post请求\",\"time\":{\"start\":1728414496871,\"stop\":1728414497027,\"duration\":156},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：发送Get请求\",\"time\":{\"start\":1728414496871,\"stop\":1728414497027,\"duration\":156},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'request_get'\"},{\"name\":\"URL\",\"value\":\"'http://shop-xo.hctestedu.com'\"},{\"name\":\"PARAMS\",\"value\":\"{'s': 'api/cart/index', 'application': 'app', 'token': '434f1d1572a7aab2910ad51eac08697f'}\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-MSG\",\"time\":{\"start\":1728414497028,\"stop\":1728414497029,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414497028,\"stop\":1728414497029,\"duration\":1},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..msg'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'msg_success'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"断言-文本断言-等于\",\"time\":{\"start\":1728414497030,\"stop\":1728414497030,\"duration\":0},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：断言当前文本内容\",\"time\":{\"start\":1728414497030,\"stop\":1728414497030,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'assert_text_comparators'\"},{\"name\":\"VALUE\",\"value\":\"'success'\"},{\"name\":\"EXPECTED\",\"value\":\"'success'\"},{\"name\":\"OP_STR\",\"value\":\"'=='\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据-购物车ID，用来删除\",\"time\":{\"start\":1728414497030,\"stop\":1728414497031,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414497031,\"stop\":1728414497031,\"duration\":0},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..id'\"},{\"name\":\"INDEX\",\"value\":\"0\"},{\"name\":\"VARNAME\",\"value\":\"'card_id_1'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false},{\"name\":\"通过JSONPATH提取数据--购物车ID，用来提交订单\",\"time\":{\"start\":1728414497032,\"stop\":1728414497033,\"duration\":1},\"status\":\"passed\",\"steps\":[{\"name\":\"参数数据：提取响应数据并存储\",\"time\":{\"start\":1728414497032,\"stop\":1728414497033,\"duration\":1},\"status\":\"passed\",\"steps\":[],\"attachments\":[],\"parameters\":[{\"name\":\"关键字\",\"value\":\"'ex_jsonData'\"},{\"name\":\"EXVALUE\",\"value\":\"'$..id'\"},{\"name\":\"INDEX\",\"value\":\"1\"},{\"name\":\"VARNAME\",\"value\":\"'card_id_2'\"}],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":0,\"attachmentStep\":false}],\"attachments\":[],\"parameters\":[],\"attachmentsCount\":0,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":1,\"attachmentStep\":false}],\"attachments\":[{\"uid\":\"a5fef75610a2f2bd\",\"name\":\"log\",\"source\":\"a5fef75610a2f2bd.txt\",\"type\":\"text/plain\",\"size\":311},{\"uid\":\"f7acbc72c1cddd8f\",\"name\":\"stdout\",\"source\":\"f7acbc72c1cddd8f.txt\",\"type\":\"text/plain\",\"size\":2944}],\"parameters\":[],\"attachmentsCount\":2,\"shouldDisplayMessage\":false,\"hasContent\":true,\"stepsCount\":10,\"attachmentStep\":false},\"afterStages\":[],\"labels\":[{\"name\":\"story\",\"value\":\"订单模块\"},{\"name\":\"feature\",\"value\":\"购物车模块\"},{\"name\":\"parentSuite\",\"value\":\"core\"},{\"name\":\"suite\",\"value\":\"ApiTestRunner\"},{\"name\":\"subSuite\",\"value\":\"TestRunner\"},{\"name\":\"host\",\"value\":\"winhok\"},{\"name\":\"thread\",\"value\":\"9712-MainThread\"},{\"name\":\"framework\",\"value\":\"pytest\"},{\"name\":\"language\",\"value\":\"cpython3\"},{\"name\":\"package\",\"value\":\"core.ApiTestRunner\"},{\"name\":\"resultFormat\",\"value\":\"allure2\"}],\"parameters\":[{\"name\":\"caseinfo\",\"value\":\"''\"}],\"links\":[],\"hidden\":false,\"retry\":false,\"extra\":{\"severity\":\"normal\",\"retries\":[],\"categories\":[],\"tags\":[]},\"source\":\"f231b963eaf35a29.json\",\"parameterValues\":[\"''\"]}", 
 "export/influxDbData.txt": "launch_status failed=0 1728414509000000000\nlaunch_status broken=2 1728414509000000000\nlaunch_status passed=14 1728414509000000000\nlaunch_status skipped=0 1728414509000000000\nlaunch_status unknown=0 1728414509000000000\nlaunch_time duration=9929 1728414509000000000\nlaunch_time min_duration=133 1728414509000000000\nlaunch_time max_duration=2146 1728414509000000000\nlaunch_time sum_duration=9378 1728414509000000000\nlaunch_time start=1728414495710 1728414509000000000\nlaunch_time stop=1728414505639 1728414509000000000\nlaunch_problems test_defects=2 1728414509000000000\nlaunch_retries retries=0 1728414509000000000\nlaunch_retries run=16 1728414509000000000\n", 
 "export/mail.html": "data:text/html;base64, PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5BbGx1cmUgUmVwb3J0IHN1bW1hcnkgbWFpbDwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CiAgICBNYWlsIGJvZHkKPC9ib2R5Pgo8L2h0bWw+Cg==", 
 "export/prometheusData.txt": "launch_status_failed 0\nlaunch_status_broken 2\nlaunch_status_passed 14\nlaunch_status_skipped 0\nlaunch_status_unknown 0\nlaunch_time_duration 9929\nlaunch_time_min_duration 133\nlaunch_time_max_duration 2146\nlaunch_time_sum_duration 9378\nlaunch_time_start 1728414495710\nlaunch_time_stop 1728414505639\nlaunch_problems_test_defects 2\nlaunch_retries_retries 0\nlaunch_retries_run 16\n", 
 "history/categories-trend.json": "[{\"data\":{\"Test defects\":2}}]", 
 "history/duration-trend.json": "[{\"data\":{\"duration\":9929}}]", 
 "history/history-trend.json": "[{\"data\":{\"failed\":0,\"broken\":2,\"skipped\":0,\"passed\":14,\"unknown\":0,\"total\":16}}]", 
 "history/history.json": "{\"ec001c164e4bc0952ba3cad52744b597\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"6d91d2c3d36393e\",\"status\":\"passed\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176}}]},\"599c7af1a0c9f4120e30e1b61ea55f26\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"507442bfe1017b59\",\"status\":\"passed\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158}}]},\"04d671ecdbb6725d51de5dd9352c5070\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"7e0521dbe55b45fe\",\"status\":\"passed\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182}}]},\"04a30b87a64481eda6893f249e7740a8\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"5e75ff36be7819ef\",\"status\":\"passed\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133}}]},\"930b0a7c14bb9d14e2567a1011a5a029\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"ae8f4ed1618bec7b\",\"status\":\"passed\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142}}]},\"c39b2570863c7595d3e36f580e9b123d\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"5ba6659e6546b46\",\"status\":\"passed\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474}}]},\"9b05d4738e82a298f1372cd4a1017e9e\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"f231b963eaf35a29\",\"status\":\"passed\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163}}]},\"70f19a6af75b9167474f6ec808118c6a\":{\"statistic\":{\"failed\":0,\"broken\":1,\"skipped\":0,\"passed\":0,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"56991eb67b28e2e1\",\"status\":\"broken\",\"statusDetails\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD7BA4250&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036}}]},\"fc86752b3d21f6f6c332871a921533f1\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"56d77263f9f0bc36\",\"status\":\"passed\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213}}]},\"27af8788a0cf4ac985e2d59266b776ee\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"7a1f090ca757623\",\"status\":\"passed\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205}}]},\"d29956a434dd772e90f0fdab49df661d\":{\"statistic\":{\"failed\":0,\"broken\":1,\"skipped\":0,\"passed\":0,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"79652414956fd36\",\"status\":\"broken\",\"statusDetails\":\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /login_safe (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000022BD78A24D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146}}]},\"4b6165e7e948b32a9aab372812228d8a\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"7b9468eb5499881b\",\"status\":\"passed\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727}}]},\"830291ab8dcfcc947801096a47e03a73\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"3a3ea388a40212e2\",\"status\":\"passed\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148}}]},\"8a78055d84aedd8b0f62abc4c206a2e8\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"2185ce8ae78ddd71\",\"status\":\"passed\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135}}]},\"6d862e7d162b2534811fdb18d1156959\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"8efb5df6e5394699\",\"status\":\"passed\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172}}]},\"bf465e5b2728b681bc8b331c9c9134c7\":{\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1},\"items\":[{\"uid\":\"44f6c54e2a9b8299\",\"status\":\"passed\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168}}]}}", 
 "history/retry-trend.json": "[{\"data\":{\"run\":16,\"retry\":0}}]", 
 "plugin/behaviors/index.js": "'use strict';\n\nallure.api.addTranslation('en', {\n    tab: {\n        behaviors: {\n            name: 'Behaviors'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Features by stories',\n            showAll: 'show all'\n        }\n    }\n});\n\nallure.api.addTranslation('ru', {\n    tab: {\n        behaviors: {\n            name: 'Функциональность'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Функциональность',\n            showAll: 'показать все'\n        }\n    }\n});\n\nallure.api.addTranslation('zh', {\n    tab: {\n        behaviors: {\n            name: '功能'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: '特性场景',\n            showAll: '显示所有'\n        }\n    }\n});\n\nallure.api.addTranslation('de', {\n    tab: {\n        behaviors: {\n            name: 'Verhalten'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Features nach Stories',\n            showAll: 'Zeige alle'\n        }\n    }\n});\n\nallure.api.addTranslation('nl', {\n    tab: {\n        behaviors: {\n            name: 'Functionaliteit'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Features en story’s',\n            showAll: 'Toon alle'\n        }\n    }\n});\n\nallure.api.addTranslation('he', {\n    tab: {\n        behaviors: {\n            name: 'התנהגויות'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'תכונות לפי סיפורי משתמש',\n            showAll: 'הצג הכול'\n        }\n    }\n});\n\nallure.api.addTranslation('br', {\n    tab: {\n        behaviors: {\n            name: 'Comportamentos'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Funcionalidades por história',\n            showAll: 'Mostrar tudo'\n        }\n    }\n});\n\nallure.api.addTranslation('ja', {\n    tab: {\n        behaviors: {\n            name: '振る舞い'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'ストーリー別の機能',\n            showAll: '全て表示'\n        }\n    }\n});\n\nallure.api.addTranslation('es', {\n    tab: {\n        behaviors: {\n            name: 'Funcionalidades'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Funcionalidades por Historias de Usuario',\n            showAll: 'mostrar todo'\n        }\n    }\n});\n\nallure.api.addTranslation('kr', {\n    tab: {\n        behaviors: {\n            name: '동작'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: '스토리별 기능',\n            showAll: '전체 보기'\n        }\n    }\n});\n\nallure.api.addTranslation('fr', {\n    tab: {\n        behaviors: {\n            name: 'Comportements'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Thèmes par histoires',\n            showAll: 'Montrer tout'\n        }\n    }\n});\n\nallure.api.addTranslation('pl', {\n    tab: {\n        behaviors: {\n            name: 'Zachowania'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Funkcje według historii',\n            showAll: 'pokaż wszystko'\n        }\n    }\n});\n\nallure.api.addTranslation('az', {\n    tab: {\n        behaviors: {\n            name: 'Davranışlar'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Hekayələr üzrə xüsusiyyətlər',\n            showAll: 'hamısını göstər'\n        }\n    }\n});\n\nallure.api.addTranslation('sv', {\n    tab: {\n        behaviors: {\n            name: 'Beteenden'\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Funktioner efter user stories',\n            showAll: 'visa allt'\n        }\n    }\n});\n\nallure.api.addTranslation('isv', {\n    tab: {\n        behaviors: {\n            name: 'Funkcionalnost',\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'Funkcionalnost',\n            showAll: 'pokaži vsěčto',\n        }\n    }\n});\n\n\nallure.api.addTranslation('ka', {\n    tab: {\n        behaviors: {\n            name: 'ფუნქციონალი',\n        }\n    },\n    widget: {\n        behaviors: {\n            name: 'ფუნქციონალი',\n            showAll: 'ყველას ჩვენება',\n        }\n    }\n});\n\n\nallure.api.addTab('behaviors', {\n    title: 'tab.behaviors.name', icon: 'fa fa-list',\n    route: 'behaviors(/)(:testGroup)(/)(:testResult)(/)(:testResultTab)(/)',\n    onEnter: (function (testGroup, testResult, testResultTab) {\n        return new allure.components.TreeLayout({\n            testGroup: testGroup,\n            testResult: testResult,\n            testResultTab: testResultTab,\n            tabName: 'tab.behaviors.name',\n            baseUrl: 'behaviors',\n            url: 'data/behaviors.json',\n            csvUrl: 'data/behaviors.csv'\n        });\n    })\n});\n\nallure.api.addWidget('widgets', 'behaviors', allure.components.WidgetStatusView.extend({\n    rowTag: 'a',\n    title: 'widget.behaviors.name',\n    baseUrl: 'behaviors',\n    showLinks: true\n}));\n", 
 "plugin/packages/index.js": "'use strict';\n\nallure.api.addTranslation('en', {\n    tab: {\n        packages: {\n            name: 'Packages'\n        }\n    }\n});\n\nallure.api.addTranslation('ru', {\n    tab: {\n        packages: {\n            name: 'Пакеты'\n        }\n    }\n});\n\nallure.api.addTranslation('zh', {\n    tab: {\n        packages: {\n            name: '包'\n        }\n    }\n});\n\nallure.api.addTranslation('de', {\n    tab: {\n        packages: {\n            name: 'Pakete'\n        }\n    }\n});\n\nallure.api.addTranslation('nl', {\n    tab: {\n        packages: {\n            name: 'Packages'\n        }\n    }\n});\n\nallure.api.addTranslation('he', {\n    tab: {\n        packages: {\n            name: 'חבילות'\n        }\n    }\n});\n\nallure.api.addTranslation('br', {\n    tab: {\n        packages: {\n            name: 'Pacotes'\n        }\n    }\n});\n\nallure.api.addTranslation('ja', {\n    tab: {\n        packages: {\n            name: 'パッケージ'\n        }\n    }\n});\n\nallure.api.addTranslation('es', {\n    tab: {\n        packages: {\n            name: 'Paquetes'\n        }\n    }\n});\n\nallure.api.addTranslation('kr', {\n    tab: {\n        packages: {\n            name: '패키지'\n        }\n    }\n});\n\nallure.api.addTranslation('fr', {\n    tab: {\n        packages: {\n            name: 'Paquets'\n        }\n    }\n});\n\nallure.api.addTranslation('pl', {\n    tab: {\n        packages: {\n            name: 'Pakiety'\n        }\n    }\n});\n\nallure.api.addTranslation('az', {\n    tab: {\n        packages: {\n            name: 'Paketlər'\n        }\n    }\n});\n\nallure.api.addTranslation('sv', {\n    tab: {\n        packages: {\n            name: 'Paket'\n        }\n    }\n});\n\nallure.api.addTranslation('isv', {\n    tab: {\n        packages: {\n            name: 'Pakety'\n        }\n    }\n});\n\nallure.api.addTranslation('ka', {\n    tab: {\n        packages: {\n            name: 'პაკეტები'\n        }\n    }\n});\nallure.api.addTab('packages', {\n    title: 'tab.packages.name', icon: 'fa fa-align-left',\n    route: 'packages(/)(:testGroup)(/)(:testResult)(/)(:testResultTab)(/)',\n    onEnter: (function (testGroup, testResult, testResultTab) {\n        return new allure.components.TreeLayout({\n            testGroup: testGroup,\n            testResult: testResult,\n            testResultTab: testResultTab,\n            tabName: 'tab.packages.name',\n            baseUrl: 'packages',\n            url: 'data/packages.json'\n        });\n    })\n});\n", 
 "plugin/screen-diff/index.js": "(function () {\n    var settings = allure.getPluginSettings('screen-diff', { diffType: 'diff' });\n\n    function renderImage(src) {\n        return (\n            '&lt;div class=\"screen-diff__container\"&gt;' +\n            '&lt;img class=\"screen-diff__image\" src=\"' +\n            src +\n            '\"&gt;' +\n            '&lt;/div&gt;'\n        );\n    }\n\n    function findImage(data, name) {\n        if (data.testStage && data.testStage.attachments) {\n            var matchedImage = data.testStage.attachments.filter(function (attachment) {\n                return attachment.name === name;\n            })[0];\n            if (matchedImage) {\n                return 'data/attachments/' + matchedImage.source;\n            }\n        }\n        return null;\n    }\n\n    function renderDiffContent(type, diffImage, actualImage, expectedImage) {\n        if (type === 'diff') {\n            if (diffImage) {\n                return renderImage(diffImage);\n            }\n        }\n        if (type === 'overlay' && expectedImage) {\n            return (\n                '&lt;div class=\"screen-diff__overlay screen-diff__container\"&gt;' +\n                '&lt;img class=\"screen-diff__image\" src=\"' +\n                expectedImage +\n                '\"&gt;' +\n                '&lt;div class=\"screen-diff__image-over\"&gt;' +\n                '&lt;img class=\"screen-diff__image\" src=\"' +\n                actualImage +\n                '\"&gt;' +\n                '&lt;/div&gt;' +\n                '&lt;/div&gt;'\n            );\n        }\n        if (actualImage) {\n            return renderImage(actualImage);\n        }\n        return 'No diff data provided';\n    }\n\n    var TestResultView = Backbone.Marionette.View.extend({\n        regions: {\n            subView: '.screen-diff-view',\n        },\n        template: function () {\n            return '&lt;div class=\"screen-diff-view\"&gt;&lt;/div&gt;';\n        },\n        onRender: function () {\n            var data = this.model.toJSON();\n            var testType = data.labels.filter(function (label) {\n                return label.name === 'testType';\n            })[0];\n            var diffImage = findImage(data, 'diff');\n            var actualImage = findImage(data, 'actual');\n            var expectedImage = findImage(data, 'expected');\n            if (!testType || testType.value !== 'screenshotDiff') {\n                return;\n            }\n            this.showChildView(\n                'subView',\n                new ScreenDiffView({\n                    diffImage: diffImage,\n                    actualImage: actualImage,\n                    expectedImage: expectedImage,\n                }),\n            );\n        },\n    });\n    var ErrorView = Backbone.Marionette.View.extend({\n        templateContext: function () {\n            return this.options;\n        },\n        template: function (data) {\n            return '&lt;pre class=\"screen-diff-error\"&gt;' + data.error + '&lt;/pre&gt;';\n        },\n    });\n    var AttachmentView = Backbone.Marionette.View.extend({\n        regions: {\n            subView: '.screen-diff-view',\n        },\n        template: function () {\n            return '&lt;div class=\"screen-diff-view\"&gt;&lt;/div&gt;';\n        },\n        onRender: function () {\n            jQuery\n                .getJSON(this.options.sourceUrl)\n                .then(this.renderScreenDiffView.bind(this), this.renderErrorView.bind(this));\n        },\n        renderErrorView: function (error) {\n            console.log(error);\n            this.showChildView(\n                'subView',\n                new ErrorView({\n                    error: error.statusText,\n                }),\n            );\n        },\n        renderScreenDiffView: function (data) {\n            this.showChildView(\n                'subView',\n                new ScreenDiffView({\n                    diffImage: data.diff,\n                    actualImage: data.actual,\n                    expectedImage: data.expected,\n                }),\n            );\n        },\n    });\n\n    var ScreenDiffView = Backbone.Marionette.View.extend({\n        className: 'pane__section',\n        events: function () {\n            return {\n                ['click [name=\"screen-diff-type-' + this.cid + '\"]']: 'onDiffTypeChange',\n                'mousemove .screen-diff__overlay': 'onOverlayMove',\n            };\n        },\n        initialize: function (options) {\n            this.diffImage = options.diffImage;\n            this.actualImage = options.actualImage;\n            this.expectedImage = options.expectedImage;\n            this.radioName = 'screen-diff-type-' + this.cid;\n        },\n        templateContext: function () {\n            return {\n                diffType: settings.get('diffType'),\n                diffImage: this.diffImage,\n                actualImage: this.actualImage,\n                expectedImage: this.expectedImage,\n                radioName: this.radioName,\n            };\n        },\n        template: function (data) {\n            if (!data.diffImage && !data.actualImage && !data.expectedImage) {\n                return '';\n            }\n\n            return (\n                '&lt;h3 class=\"pane__section-title\"&gt;Screen Diff&lt;/h3&gt;' +\n                '&lt;div class=\"screen-diff__content\"&gt;' +\n                '&lt;div class=\"screen-diff__switchers\"&gt;' +\n                '&lt;label&gt;&lt;input type=\"radio\" name=\"' +\n                data.radioName +\n                '\" value=\"diff\"&gt; Show diff&lt;/label&gt;' +\n                '&lt;label&gt;&lt;input type=\"radio\" name=\"' +\n                data.radioName +\n                '\" value=\"overlay\"&gt; Show overlay&lt;/label&gt;' +\n                '&lt;/div&gt;' +\n                renderDiffContent(\n                    data.diffType,\n                    data.diffImage,\n                    data.actualImage,\n                    data.expectedImage,\n                ) +\n                '&lt;/div&gt;'\n            );\n        },\n        adjustImageSize: function (event) {\n            var overImage = this.$(event.target);\n            overImage.width(overImage.width());\n        },\n        onRender: function () {\n            const diffType = settings.get('diffType');\n            this.$('[name=\"' + this.radioName + '\"][value=\"' + diffType + '\"]').prop(\n                'checked',\n                true,\n            );\n            if (diffType === 'overlay') {\n                this.$('.screen-diff__image-over img').on('load', this.adjustImageSize.bind(this));\n            }\n        },\n        onOverlayMove: function (event) {\n            var pageX = event.pageX;\n            var containerScroll = this.$('.screen-diff__container').scrollLeft();\n            var elementX = event.currentTarget.getBoundingClientRect().left;\n            var delta = pageX - elementX + containerScroll;\n            this.$('.screen-diff__image-over').width(delta);\n        },\n        onDiffTypeChange: function (event) {\n            settings.save('diffType', event.target.value);\n            this.render();\n        },\n    });\n    allure.api.addTestResultBlock(TestResultView, { position: 'before' });\n    allure.api.addAttachmentViewer('application/vnd.allure.image.diff', {\n        View: AttachmentView,\n        icon: 'fa fa-exchange',\n    });\n})();\n", 
 "plugin/screen-diff/styles.css": ".screen-diff__switchers {\n  margin-bottom: 1em;\n}\n\n.screen-diff__switchers label + label {\n  margin-left: 1em;\n}\n\n.screen-diff__overlay {\n  position: relative;\n  cursor: col-resize;\n}\n\n.screen-diff__container {\n  overflow-x: auto;\n}\n\n.screen-diff__image-over {\n  top: 0;\n  left: 0;\n  bottom: 0;\n  background: #fff;\n  position: absolute;\n  overflow: hidden;\n  box-shadow: 2px 0 1px -1px #aaa;\n}\n\n.screen-diff-error {\n  color: #fd5a3e;\n}\n", 
 "widgets/behaviors.json": "{\"total\":5,\"items\":[{\"uid\":\"6958045a481574bf02bb11ef07a7047b\",\"name\":\"登录模块\",\"statistic\":{\"failed\":0,\"broken\":1,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":2}},{\"uid\":\"76e5fd360fd49f5d26aa0e7d1dc18c5c\",\"name\":\"注册模块\",\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1}},{\"uid\":\"a83f24d9e1c208095768a6add7b4e5f8\",\"name\":\"购物车模块\",\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1}},{\"uid\":\"2ac868be9eb6cef30715c6c4b8d38646\",\"name\":\"地址模块\",\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1}},{\"uid\":\"fa1612b17e9a6e5a15f628632061b4f1\",\"name\":\"提交订单模块\",\"statistic\":{\"failed\":0,\"broken\":0,\"skipped\":0,\"passed\":1,\"unknown\":0,\"total\":1}}]}", 
 "widgets/categories-trend.json": "[{\"data\":{\"Test defects\":2}}]", 
 "widgets/categories.json": "{\"total\":1,\"items\":[{\"uid\":\"bdbf199525818fae7a8651db9eafe741\",\"name\":\"Test defects\",\"statistic\":{\"failed\":0,\"broken\":2,\"skipped\":0,\"passed\":0,\"unknown\":0,\"total\":2}}]}", 
 "widgets/duration-trend.json": "[{\"data\":{\"duration\":9929}}]", 
 "widgets/duration.json": "[{\"uid\":\"f231b963eaf35a29\",\"name\":\"查询购物车列表数据\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"3a3ea388a40212e2\",\"name\":\"加入购物车成功-表单格式\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"7a1f090ca757623\",\"name\":\"提交订单-购物车\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"56991eb67b28e2e1\",\"name\":\"加密接口-错误的用户名和密码\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"status\":\"broken\",\"severity\":\"normal\"},{\"uid\":\"7e0521dbe55b45fe\",\"name\":\"T2-登录用例-正确的用户名和密码\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"5ba6659e6546b46\",\"name\":\"查询地址列表\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"79652414956fd36\",\"name\":\"加密接口-正确的用户名和密码\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"status\":\"broken\",\"severity\":\"normal\"},{\"uid\":\"7b9468eb5499881b\",\"name\":\"查询地址列表-提交订单用\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"6d91d2c3d36393e\",\"name\":\"T2-登录用例-正确的用户名和密码\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"5e75ff36be7819ef\",\"name\":\"删除购物车成功\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"507442bfe1017b59\",\"name\":\"加入购物车成功-JSON格式\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"8efb5df6e5394699\",\"name\":\"T2-登录用例-错误的用户名和密码\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"ae8f4ed1618bec7b\",\"name\":\"添加地址接口\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"56d77263f9f0bc36\",\"name\":\"用户注册用例-生成用户名能生成成功\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"44f6c54e2a9b8299\",\"name\":\"提交订单-商品详情\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"2185ce8ae78ddd71\",\"name\":\"删除地址列表\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135},\"status\":\"passed\",\"severity\":\"normal\"}]", 
 "widgets/environment.json": "[]", 
 "widgets/executors.json": "[]", 
 "widgets/history-trend.json": "[{\"data\":{\"failed\":0,\"broken\":2,\"skipped\":0,\"passed\":14,\"unknown\":0,\"total\":16}}]", 
 "widgets/launch.json": "[]", 
 "widgets/retry-trend.json": "[{\"data\":{\"run\":16,\"retry\":0}}]", 
 "widgets/severity.json": "[{\"uid\":\"56d77263f9f0bc36\",\"name\":\"用户注册用例-生成用户名能生成成功\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"79652414956fd36\",\"name\":\"加密接口-正确的用户名和密码\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"status\":\"broken\",\"severity\":\"normal\"},{\"uid\":\"56991eb67b28e2e1\",\"name\":\"加密接口-错误的用户名和密码\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"status\":\"broken\",\"severity\":\"normal\"},{\"uid\":\"6d91d2c3d36393e\",\"name\":\"T2-登录用例-正确的用户名和密码\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"5ba6659e6546b46\",\"name\":\"查询地址列表\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"8efb5df6e5394699\",\"name\":\"T2-登录用例-错误的用户名和密码\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"3a3ea388a40212e2\",\"name\":\"加入购物车成功-表单格式\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"7a1f090ca757623\",\"name\":\"提交订单-购物车\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"7e0521dbe55b45fe\",\"name\":\"T2-登录用例-正确的用户名和密码\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"ae8f4ed1618bec7b\",\"name\":\"添加地址接口\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"7b9468eb5499881b\",\"name\":\"查询地址列表-提交订单用\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"2185ce8ae78ddd71\",\"name\":\"删除地址列表\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"507442bfe1017b59\",\"name\":\"加入购物车成功-JSON格式\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"f231b963eaf35a29\",\"name\":\"查询购物车列表数据\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"5e75ff36be7819ef\",\"name\":\"删除购物车成功\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"44f6c54e2a9b8299\",\"name\":\"提交订单-商品详情\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168},\"status\":\"passed\",\"severity\":\"normal\"}]", 
 "widgets/status-chart.json": "[{\"uid\":\"f231b963eaf35a29\",\"name\":\"查询购物车列表数据\",\"time\":{\"start\":1728414496870,\"stop\":1728414497033,\"duration\":163},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"3a3ea388a40212e2\",\"name\":\"加入购物车成功-表单格式\",\"time\":{\"start\":1728414496554,\"stop\":1728414496702,\"duration\":148},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"7a1f090ca757623\",\"name\":\"提交订单-购物车\",\"time\":{\"start\":1728414500672,\"stop\":1728414500877,\"duration\":205},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"56991eb67b28e2e1\",\"name\":\"加密接口-错误的用户名和密码\",\"time\":{\"start\":1728414503603,\"stop\":1728414505639,\"duration\":2036},\"status\":\"broken\",\"severity\":\"normal\"},{\"uid\":\"7e0521dbe55b45fe\",\"name\":\"T2-登录用例-正确的用户名和密码\",\"time\":{\"start\":1728414496368,\"stop\":1728414496550,\"duration\":182},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"5ba6659e6546b46\",\"name\":\"查询地址列表\",\"time\":{\"start\":1728414497175,\"stop\":1728414498649,\"duration\":1474},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"79652414956fd36\",\"name\":\"加密接口-正确的用户名和密码\",\"time\":{\"start\":1728414501058,\"stop\":1728414503204,\"duration\":2146},\"status\":\"broken\",\"severity\":\"normal\"},{\"uid\":\"7b9468eb5499881b\",\"name\":\"查询地址列表-提交订单用\",\"time\":{\"start\":1728414498940,\"stop\":1728414500667,\"duration\":1727},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"6d91d2c3d36393e\",\"name\":\"T2-登录用例-正确的用户名和密码\",\"time\":{\"start\":1728414495999,\"stop\":1728414496175,\"duration\":176},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"5e75ff36be7819ef\",\"name\":\"删除购物车成功\",\"time\":{\"start\":1728414497037,\"stop\":1728414497170,\"duration\":133},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"507442bfe1017b59\",\"name\":\"加入购物车成功-JSON格式\",\"time\":{\"start\":1728414496707,\"stop\":1728414496865,\"duration\":158},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"8efb5df6e5394699\",\"name\":\"T2-登录用例-错误的用户名和密码\",\"time\":{\"start\":1728414496191,\"stop\":1728414496363,\"duration\":172},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"ae8f4ed1618bec7b\",\"name\":\"添加地址接口\",\"time\":{\"start\":1728414498794,\"stop\":1728414498936,\"duration\":142},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"56d77263f9f0bc36\",\"name\":\"用户注册用例-生成用户名能生成成功\",\"time\":{\"start\":1728414495710,\"stop\":1728414495923,\"duration\":213},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"44f6c54e2a9b8299\",\"name\":\"提交订单-商品详情\",\"time\":{\"start\":1728414500886,\"stop\":1728414501054,\"duration\":168},\"status\":\"passed\",\"severity\":\"normal\"},{\"uid\":\"2185ce8ae78ddd71\",\"name\":\"删除地址列表\",\"time\":{\"start\":1728414498654,\"stop\":1728414498789,\"duration\":135},\"status\":\"passed\",\"severity\":\"normal\"}]", 
 "widgets/suites.json": "{\"total\":1,\"items\":[{\"uid\":\"72796fdbb1ef5e42d7f9951dd4e7356a\",\"name\":\"core\",\"statistic\":{\"failed\":0,\"broken\":2,\"skipped\":0,\"passed\":14,\"unknown\":0,\"total\":16}}]}", 
 "widgets/summary.json": "{\"reportName\":\"Allure Report\",\"testRuns\":[],\"statistic\":{\"failed\":0,\"broken\":2,\"skipped\":0,\"passed\":14,\"unknown\":0,\"total\":16},\"time\":{\"start\":1728414495710,\"stop\":1728414505639,\"duration\":9929,\"minDuration\":133,\"maxDuration\":2146,\"sumDuration\":9378}}", 
};
    var server = sinon.fakeServer.create();

                server.respondWith("GET", "data/behaviors.csv", [
                      200, { "Content-Type": "text/csv" }, server_data["data/behaviors.csv"],
                ]);
            
                server.respondWith("GET", "data/behaviors.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/behaviors.json"],
                ]);
            
                server.respondWith("GET", "data/categories.csv", [
                      200, { "Content-Type": "text/csv" }, server_data["data/categories.csv"],
                ]);
            
                server.respondWith("GET", "data/categories.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/categories.json"],
                ]);
            
                server.respondWith("GET", "data/packages.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/packages.json"],
                ]);
            
                server.respondWith("GET", "data/suites.csv", [
                      200, { "Content-Type": "text/csv" }, server_data["data/suites.csv"],
                ]);
            
                server.respondWith("GET", "data/suites.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/suites.json"],
                ]);
            
                server.respondWith("GET", "data/timeline.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/timeline.json"],
                ]);
            
                server.respondWith("GET", "data/attachments/11368f446ed88a52.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/11368f446ed88a52.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/11a464ce9c4a18e0.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/11a464ce9c4a18e0.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/1f566bb19c97218.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/1f566bb19c97218.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/284a29bd61803f63.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/284a29bd61803f63.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/313cb6aff85d7d3b.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/313cb6aff85d7d3b.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/3344ff42ea1d7d49.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/3344ff42ea1d7d49.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/3615fd726f5ddaef.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/3615fd726f5ddaef.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/3aeaee54aacc032c.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/3aeaee54aacc032c.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/41355006111046a2.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/41355006111046a2.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/444d4863699e53fc.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/444d4863699e53fc.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/4abbb61901269f4f.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/4abbb61901269f4f.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/4d3ab828e4e5c305.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/4d3ab828e4e5c305.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/52eb79fa7ffaf37c.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/52eb79fa7ffaf37c.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/62bdef39f3c93405.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/62bdef39f3c93405.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/65b4e3182729e996.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/65b4e3182729e996.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/6cf441aad8786a64.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/6cf441aad8786a64.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/6dcb82044ebaceb4.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/6dcb82044ebaceb4.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/7d469a7a70bd27fc.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/7d469a7a70bd27fc.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/80b106d54bc60811.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/80b106d54bc60811.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/813c08cf3e07812c.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/813c08cf3e07812c.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/9010743f5ccb597e.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/9010743f5ccb597e.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/975e6a2dec1c0785.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/975e6a2dec1c0785.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/a5fef75610a2f2bd.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/a5fef75610a2f2bd.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/ab58330f17ac0915.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/ab58330f17ac0915.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/b5ef652f4852e771.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/b5ef652f4852e771.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/c1333aa28343e097.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/c1333aa28343e097.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/cb18a662089daca4.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/cb18a662089daca4.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/e642b66d783664d6.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/e642b66d783664d6.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/eb6a2e54bbd87ada.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/eb6a2e54bbd87ada.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/ee581da4beb68ebc.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/ee581da4beb68ebc.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/f7acbc72c1cddd8f.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/f7acbc72c1cddd8f.txt"],
                ]);
            
                server.respondWith("GET", "data/attachments/fce5dc13382d7128.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["data/attachments/fce5dc13382d7128.txt"],
                ]);
            
                server.respondWith("GET", "data/test-cases/2185ce8ae78ddd71.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/2185ce8ae78ddd71.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/3a3ea388a40212e2.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/3a3ea388a40212e2.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/44f6c54e2a9b8299.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/44f6c54e2a9b8299.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/507442bfe1017b59.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/507442bfe1017b59.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/56991eb67b28e2e1.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/56991eb67b28e2e1.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/56d77263f9f0bc36.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/56d77263f9f0bc36.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/5ba6659e6546b46.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/5ba6659e6546b46.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/5e75ff36be7819ef.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/5e75ff36be7819ef.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/6d91d2c3d36393e.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/6d91d2c3d36393e.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/79652414956fd36.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/79652414956fd36.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/7a1f090ca757623.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/7a1f090ca757623.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/7b9468eb5499881b.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/7b9468eb5499881b.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/7e0521dbe55b45fe.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/7e0521dbe55b45fe.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/8efb5df6e5394699.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/8efb5df6e5394699.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/ae8f4ed1618bec7b.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/ae8f4ed1618bec7b.json"],
                ]);
            
                server.respondWith("GET", "data/test-cases/f231b963eaf35a29.json", [
                      200, { "Content-Type": "application/json" }, server_data["data/test-cases/f231b963eaf35a29.json"],
                ]);
            
                server.respondWith("GET", "export/influxDbData.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["export/influxDbData.txt"],
                ]);
            
                server.respondWith("GET", "export/mail.html", [
                      200, { "Content-Type": "text/html" }, server_data["export/mail.html"],
                ]);
            
                server.respondWith("GET", "export/prometheusData.txt", [
                      200, { "Content-Type": "text/plain;charset=UTF-8" }, server_data["export/prometheusData.txt"],
                ]);
            
                server.respondWith("GET", "history/categories-trend.json", [
                      200, { "Content-Type": "application/json" }, server_data["history/categories-trend.json"],
                ]);
            
                server.respondWith("GET", "history/duration-trend.json", [
                      200, { "Content-Type": "application/json" }, server_data["history/duration-trend.json"],
                ]);
            
                server.respondWith("GET", "history/history-trend.json", [
                      200, { "Content-Type": "application/json" }, server_data["history/history-trend.json"],
                ]);
            
                server.respondWith("GET", "history/history.json", [
                      200, { "Content-Type": "application/json" }, server_data["history/history.json"],
                ]);
            
                server.respondWith("GET", "history/retry-trend.json", [
                      200, { "Content-Type": "application/json" }, server_data["history/retry-trend.json"],
                ]);
            
                server.respondWith("GET", "plugin/behaviors/index.js", [
                      200, { "Content-Type": "application/javascript" }, server_data["plugin/behaviors/index.js"],
                ]);
            
                server.respondWith("GET", "plugin/packages/index.js", [
                      200, { "Content-Type": "application/javascript" }, server_data["plugin/packages/index.js"],
                ]);
            
                server.respondWith("GET", "plugin/screen-diff/index.js", [
                      200, { "Content-Type": "application/javascript" }, server_data["plugin/screen-diff/index.js"],
                ]);
            
                server.respondWith("GET", "plugin/screen-diff/styles.css", [
                      200, { "Content-Type": "text/css" }, server_data["plugin/screen-diff/styles.css"],
                ]);
            
                server.respondWith("GET", "widgets/behaviors.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/behaviors.json"],
                ]);
            
                server.respondWith("GET", "widgets/categories-trend.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/categories-trend.json"],
                ]);
            
                server.respondWith("GET", "widgets/categories.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/categories.json"],
                ]);
            
                server.respondWith("GET", "widgets/duration-trend.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/duration-trend.json"],
                ]);
            
                server.respondWith("GET", "widgets/duration.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/duration.json"],
                ]);
            
                server.respondWith("GET", "widgets/environment.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/environment.json"],
                ]);
            
                server.respondWith("GET", "widgets/executors.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/executors.json"],
                ]);
            
                server.respondWith("GET", "widgets/history-trend.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/history-trend.json"],
                ]);
            
                server.respondWith("GET", "widgets/launch.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/launch.json"],
                ]);
            
                server.respondWith("GET", "widgets/retry-trend.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/retry-trend.json"],
                ]);
            
                server.respondWith("GET", "widgets/severity.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/severity.json"],
                ]);
            
                server.respondWith("GET", "widgets/status-chart.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/status-chart.json"],
                ]);
            
                server.respondWith("GET", "widgets/suites.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/suites.json"],
                ]);
            
                server.respondWith("GET", "widgets/summary.json", [
                      200, { "Content-Type": "application/json" }, server_data["widgets/summary.json"],
                ]);
            server.autoRespond = true;